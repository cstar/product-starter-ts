// Copyright 2021 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file wgtwo/common/v1/types.proto (package wgtwo.common.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Country information
 *
 * All programmatic use should depend on the alpha-2 code, and NOT the human readable name
 *
 * @generated from message wgtwo.common.v1.Country
 */
export class Country extends Message<Country> {
  /**
   * ISO 3166-1 alpha-2 code. Examples: US, NO, SE
   *
   * @generated from field: string code = 1;
   */
  code = "";

  /**
   * Human readable name
   *
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<Country>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.common.v1.Country";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Country {
    return new Country().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Country {
    return new Country().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Country {
    return new Country().fromJsonString(jsonString, options);
  }

  static equals(a: Country | PlainMessage<Country> | undefined, b: Country | PlainMessage<Country> | undefined): boolean {
    return proto3.util.equals(Country, a, b);
  }
}

/**
 * This is identification of the subscription
 *
 * Our OAuth 2.0 server is configured to use Pairwise Pseudonymous Identifiers for its sub field, where all client of
 * a product will share the same identifier for a single subscription.
 *
 * This message contains this subject, given by the product your OAuth 2.0 client belongs to.
 *
 * @generated from message wgtwo.common.v1.SubscriptionIdentifier
 */
export class SubscriptionIdentifier extends Message<SubscriptionIdentifier> {
  /**
   * @generated from field: string value = 1;
   */
  value = "";

  constructor(data?: PartialMessage<SubscriptionIdentifier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.common.v1.SubscriptionIdentifier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscriptionIdentifier {
    return new SubscriptionIdentifier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscriptionIdentifier {
    return new SubscriptionIdentifier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscriptionIdentifier {
    return new SubscriptionIdentifier().fromJsonString(jsonString, options);
  }

  static equals(a: SubscriptionIdentifier | PlainMessage<SubscriptionIdentifier> | undefined, b: SubscriptionIdentifier | PlainMessage<SubscriptionIdentifier> | undefined): boolean {
    return proto3.util.equals(SubscriptionIdentifier, a, b);
  }
}

/**
 * International Mobile Subscription Identity
 * An IMSI is composed of three parts:
 *  1) Mobile Country Code (MCC) consisting of three digits. The MCC is 3 digits long and identifies
 *    uniquely the country of domicile of the mobile subscription;
 *  2) Mobile Network Code (MNC), 2 or 3 digits for 3GPP network applications. The MNC identifies
 *    the home PLMN of the mobile subscription. The length of the MNC depends on the value of the
 *    MCC. A mixture of two and three digit MNC codes within a single MCC area is not recommended.
 *  3) Mobile Subscriber Identification Number (MSIN) identifying the mobile subscription within a
 *    PLMN. Normally there are 10 digits, but can be fewer in the case of a 3-digit MNC or if
 *    national regulations indicate that the total length of the IMSI should be less than 15 digits.
 *
 * @generated from message wgtwo.common.v1.Imsi
 */
export class Imsi extends Message<Imsi> {
  /**
   * @generated from field: string value = 1;
   */
  value = "";

  constructor(data?: PartialMessage<Imsi>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.common.v1.Imsi";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Imsi {
    return new Imsi().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Imsi {
    return new Imsi().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Imsi {
    return new Imsi().fromJsonString(jsonString, options);
  }

  static equals(a: Imsi | PlainMessage<Imsi> | undefined, b: Imsi | PlainMessage<Imsi> | undefined): boolean {
    return proto3.util.equals(Imsi, a, b);
  }
}

/**
 * International Mobile station Equipment Identity and Software Version number
 * An IMEI is composed of four parts:
 *   1) an 8 digit Type Allocation Code (TAC);
 *   2) a 6 digit Serial Number (SNR);
 *   3) an optional Check Digit (CD); and
 *   4) an optional 2 digit Software Version Number (handled separately).
 * For more information see ETSI 123.003 Chapter 6 and Appendix B.
 *
 * @generated from message wgtwo.common.v1.ImeiSv
 */
export class ImeiSv extends Message<ImeiSv> {
  /**
   * @generated from field: string imei = 1;
   */
  imei = "";

  /**
   * @generated from field: string software_version = 2;
   */
  softwareVersion = "";

  constructor(data?: PartialMessage<ImeiSv>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.common.v1.ImeiSv";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "imei", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "software_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImeiSv {
    return new ImeiSv().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImeiSv {
    return new ImeiSv().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImeiSv {
    return new ImeiSv().fromJsonString(jsonString, options);
  }

  static equals(a: ImeiSv | PlainMessage<ImeiSv> | undefined, b: ImeiSv | PlainMessage<ImeiSv> | undefined): boolean {
    return proto3.util.equals(ImeiSv, a, b);
  }
}

/**
 * @generated from message wgtwo.common.v1.NetworkIdentity
 */
export class NetworkIdentity extends Message<NetworkIdentity> {
  /**
   * @generated from field: string mcc = 1;
   */
  mcc = "";

  /**
   * @generated from field: string mnc = 2;
   */
  mnc = "";

  constructor(data?: PartialMessage<NetworkIdentity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.common.v1.NetworkIdentity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mcc", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mnc", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NetworkIdentity {
    return new NetworkIdentity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NetworkIdentity {
    return new NetworkIdentity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NetworkIdentity {
    return new NetworkIdentity().fromJsonString(jsonString, options);
  }

  static equals(a: NetworkIdentity | PlainMessage<NetworkIdentity> | undefined, b: NetworkIdentity | PlainMessage<NetworkIdentity> | undefined): boolean {
    return proto3.util.equals(NetworkIdentity, a, b);
  }
}

/**
 * IpAddress v4
 *
 * @generated from message wgtwo.common.v1.IpAddressV4
 */
export class IpAddressV4 extends Message<IpAddressV4> {
  /**
   * @generated from field: string value = 1;
   */
  value = "";

  constructor(data?: PartialMessage<IpAddressV4>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.common.v1.IpAddressV4";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IpAddressV4 {
    return new IpAddressV4().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IpAddressV4 {
    return new IpAddressV4().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IpAddressV4 {
    return new IpAddressV4().fromJsonString(jsonString, options);
  }

  static equals(a: IpAddressV4 | PlainMessage<IpAddressV4> | undefined, b: IpAddressV4 | PlainMessage<IpAddressV4> | undefined): boolean {
    return proto3.util.equals(IpAddressV4, a, b);
  }
}

