// Copyright 2020 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file wgtwo/webterminal/v0/webterminal.proto (package wgtwo.webterminal.v0, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { PhoneNumber } from "../../common/v0/phonenumber_pb.js";

/**
 * @generated from message wgtwo.webterminal.v0.WebTerminalMessage
 */
export class WebTerminalMessage extends Message<WebTerminalMessage> {
  /**
   * @generated from oneof wgtwo.webterminal.v0.WebTerminalMessage.message
   */
  message: {
    /**
     * @generated from field: wgtwo.webterminal.v0.Offer offer = 1;
     */
    value: Offer;
    case: "offer";
  } | {
    /**
     * @generated from field: wgtwo.webterminal.v0.Answer answer = 2;
     */
    value: Answer;
    case: "answer";
  } | {
    /**
     * @generated from field: wgtwo.webterminal.v0.Ringing ringing = 3;
     */
    value: Ringing;
    case: "ringing";
  } | {
    /**
     * @generated from field: wgtwo.webterminal.v0.Bye bye = 4;
     */
    value: Bye;
    case: "bye";
  } | {
    /**
     * @generated from field: wgtwo.webterminal.v0.Idle idle = 5;
     */
    value: Idle;
    case: "idle";
  } | {
    /**
     * @generated from field: wgtwo.webterminal.v0.InCall in_call = 6;
     */
    value: InCall;
    case: "inCall";
  } | {
    /**
     * @generated from field: wgtwo.webterminal.v0.Error error = 7;
     */
    value: Error;
    case: "error";
  } | {
    /**
     * @generated from field: wgtwo.webterminal.v0.Action action = 9;
     */
    value: Action;
    case: "action";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: string call_id = 10;
   */
  callId = "";

  constructor(data?: PartialMessage<WebTerminalMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.webterminal.v0.WebTerminalMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "offer", kind: "message", T: Offer, oneof: "message" },
    { no: 2, name: "answer", kind: "message", T: Answer, oneof: "message" },
    { no: 3, name: "ringing", kind: "message", T: Ringing, oneof: "message" },
    { no: 4, name: "bye", kind: "message", T: Bye, oneof: "message" },
    { no: 5, name: "idle", kind: "message", T: Idle, oneof: "message" },
    { no: 6, name: "in_call", kind: "message", T: InCall, oneof: "message" },
    { no: 7, name: "error", kind: "message", T: Error, oneof: "message" },
    { no: 9, name: "action", kind: "message", T: Action, oneof: "message" },
    { no: 10, name: "call_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebTerminalMessage {
    return new WebTerminalMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebTerminalMessage {
    return new WebTerminalMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebTerminalMessage {
    return new WebTerminalMessage().fromJsonString(jsonString, options);
  }

  static equals(a: WebTerminalMessage | PlainMessage<WebTerminalMessage> | undefined, b: WebTerminalMessage | PlainMessage<WebTerminalMessage> | undefined): boolean {
    return proto3.util.equals(WebTerminalMessage, a, b);
  }
}

/**
 * @generated from message wgtwo.webterminal.v0.Offer
 */
export class Offer extends Message<Offer> {
  /**
   * @generated from field: string sdp = 1;
   */
  sdp = "";

  /**
   * @generated from field: wgtwo.common.v0.PhoneNumber msisdn = 2;
   */
  msisdn?: PhoneNumber;

  constructor(data?: PartialMessage<Offer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.webterminal.v0.Offer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sdp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "msisdn", kind: "message", T: PhoneNumber },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Offer {
    return new Offer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Offer {
    return new Offer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Offer {
    return new Offer().fromJsonString(jsonString, options);
  }

  static equals(a: Offer | PlainMessage<Offer> | undefined, b: Offer | PlainMessage<Offer> | undefined): boolean {
    return proto3.util.equals(Offer, a, b);
  }
}

/**
 * @generated from message wgtwo.webterminal.v0.Answer
 */
export class Answer extends Message<Answer> {
  /**
   * @generated from field: string sdp = 1;
   */
  sdp = "";

  constructor(data?: PartialMessage<Answer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.webterminal.v0.Answer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sdp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Answer {
    return new Answer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Answer {
    return new Answer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Answer {
    return new Answer().fromJsonString(jsonString, options);
  }

  static equals(a: Answer | PlainMessage<Answer> | undefined, b: Answer | PlainMessage<Answer> | undefined): boolean {
    return proto3.util.equals(Answer, a, b);
  }
}

/**
 * @generated from message wgtwo.webterminal.v0.Ringing
 */
export class Ringing extends Message<Ringing> {
  constructor(data?: PartialMessage<Ringing>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.webterminal.v0.Ringing";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Ringing {
    return new Ringing().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Ringing {
    return new Ringing().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Ringing {
    return new Ringing().fromJsonString(jsonString, options);
  }

  static equals(a: Ringing | PlainMessage<Ringing> | undefined, b: Ringing | PlainMessage<Ringing> | undefined): boolean {
    return proto3.util.equals(Ringing, a, b);
  }
}

/**
 * @generated from message wgtwo.webterminal.v0.Bye
 */
export class Bye extends Message<Bye> {
  constructor(data?: PartialMessage<Bye>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.webterminal.v0.Bye";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Bye {
    return new Bye().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Bye {
    return new Bye().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Bye {
    return new Bye().fromJsonString(jsonString, options);
  }

  static equals(a: Bye | PlainMessage<Bye> | undefined, b: Bye | PlainMessage<Bye> | undefined): boolean {
    return proto3.util.equals(Bye, a, b);
  }
}

/**
 * @generated from message wgtwo.webterminal.v0.Idle
 */
export class Idle extends Message<Idle> {
  constructor(data?: PartialMessage<Idle>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.webterminal.v0.Idle";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Idle {
    return new Idle().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Idle {
    return new Idle().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Idle {
    return new Idle().fromJsonString(jsonString, options);
  }

  static equals(a: Idle | PlainMessage<Idle> | undefined, b: Idle | PlainMessage<Idle> | undefined): boolean {
    return proto3.util.equals(Idle, a, b);
  }
}

/**
 * @generated from message wgtwo.webterminal.v0.InCall
 */
export class InCall extends Message<InCall> {
  /**
   * @generated from field: wgtwo.common.v0.PhoneNumber msisdn = 1;
   */
  msisdn?: PhoneNumber;

  constructor(data?: PartialMessage<InCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.webterminal.v0.InCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msisdn", kind: "message", T: PhoneNumber },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InCall {
    return new InCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InCall {
    return new InCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InCall {
    return new InCall().fromJsonString(jsonString, options);
  }

  static equals(a: InCall | PlainMessage<InCall> | undefined, b: InCall | PlainMessage<InCall> | undefined): boolean {
    return proto3.util.equals(InCall, a, b);
  }
}

/**
 * @generated from message wgtwo.webterminal.v0.Error
 */
export class Error extends Message<Error> {
  /**
   * @generated from field: wgtwo.webterminal.v0.Error.Code err = 1;
   */
  err = Error_Code.UNKNOWN;

  constructor(data?: PartialMessage<Error>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.webterminal.v0.Error";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "err", kind: "enum", T: proto3.getEnumType(Error_Code) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Error {
    return new Error().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Error {
    return new Error().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Error {
    return new Error().fromJsonString(jsonString, options);
  }

  static equals(a: Error | PlainMessage<Error> | undefined, b: Error | PlainMessage<Error> | undefined): boolean {
    return proto3.util.equals(Error, a, b);
  }
}

/**
 * @generated from enum wgtwo.webterminal.v0.Error.Code
 */
export enum Error_Code {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: NOT_INCALL = 1;
   */
  NOT_INCALL = 1,

  /**
   * @generated from enum value: TRY_AGAIN = 2;
   */
  TRY_AGAIN = 2,

  /**
   * @generated from enum value: INVALID_CALL_ID = 3;
   */
  INVALID_CALL_ID = 3,

  /**
   * @generated from enum value: RATE_LIMIT_HIT = 4;
   */
  RATE_LIMIT_HIT = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(Error_Code)
proto3.util.setEnumType(Error_Code, "wgtwo.webterminal.v0.Error.Code", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "NOT_INCALL" },
  { no: 2, name: "TRY_AGAIN" },
  { no: 3, name: "INVALID_CALL_ID" },
  { no: 4, name: "RATE_LIMIT_HIT" },
]);

/**
 * @generated from message wgtwo.webterminal.v0.ToPhone
 */
export class ToPhone extends Message<ToPhone> {
  constructor(data?: PartialMessage<ToPhone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.webterminal.v0.ToPhone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToPhone {
    return new ToPhone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToPhone {
    return new ToPhone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToPhone {
    return new ToPhone().fromJsonString(jsonString, options);
  }

  static equals(a: ToPhone | PlainMessage<ToPhone> | undefined, b: ToPhone | PlainMessage<ToPhone> | undefined): boolean {
    return proto3.util.equals(ToPhone, a, b);
  }
}

/**
 * @generated from message wgtwo.webterminal.v0.Action
 */
export class Action extends Message<Action> {
  /**
   * @generated from oneof wgtwo.webterminal.v0.Action.message
   */
  message: {
    /**
     * @generated from field: wgtwo.webterminal.v0.ToPhone toPhone = 1;
     */
    value: ToPhone;
    case: "toPhone";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Action>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.webterminal.v0.Action";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "toPhone", kind: "message", T: ToPhone, oneof: "message" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Action {
    return new Action().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Action {
    return new Action().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Action {
    return new Action().fromJsonString(jsonString, options);
  }

  static equals(a: Action | PlainMessage<Action> | undefined, b: Action | PlainMessage<Action> | undefined): boolean {
    return proto3.util.equals(Action, a, b);
  }
}

