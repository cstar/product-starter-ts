// Copyright 2020 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file wgtwo/events/v0/events.proto (package wgtwo.events.v0, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Empty, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { NationalPhoneNumber, PhoneNumber, TextAddress } from "../../common/v0/phonenumber_pb.js";

/**
 * @generated from enum wgtwo.events.v0.EventType
 */
export enum EventType {
  /**
   * @generated from enum value: UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: VOICE_EVENT = 1;
   */
  VOICE_EVENT = 1,

  /**
   * @generated from enum value: VOICEMAIL_EVENT = 2;
   */
  VOICEMAIL_EVENT = 2,

  /**
   * @generated from enum value: LOCATION_UPDATE_EVENT = 3;
   */
  LOCATION_UPDATE_EVENT = 3,

  /**
   * @generated from enum value: COUNTRY_CHANGE_EVENT = 4;
   */
  COUNTRY_CHANGE_EVENT = 4,

  /**
   * @generated from enum value: TOKEN_AUDIT_EVENT = 5;
   */
  TOKEN_AUDIT_EVENT = 5,

  /**
   * @generated from enum value: SMS_EVENT = 6;
   */
  SMS_EVENT = 6,

  /**
   * @generated from enum value: SMS_DELIVERY_REPORT_EVENT = 7;
   */
  SMS_DELIVERY_REPORT_EVENT = 7,

  /**
   * @generated from enum value: CONSENT_REVOKE_EVENT = 8;
   */
  CONSENT_REVOKE_EVENT = 8,

  /**
   * @generated from enum value: HANDSET_UPDATE_EVENT = 9;
   */
  HANDSET_UPDATE_EVENT = 9,

  /**
   * @generated from enum value: FIRST_ATTACHMENT_EVENT = 10;
   */
  FIRST_ATTACHMENT_EVENT = 10,

  /**
   * @generated from enum value: PERIODIC_COUNTRY_EVENT = 11;
   */
  PERIODIC_COUNTRY_EVENT = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(EventType)
proto3.util.setEnumType(EventType, "wgtwo.events.v0.EventType", [
  { no: 0, name: "UNSPECIFIED" },
  { no: 1, name: "VOICE_EVENT" },
  { no: 2, name: "VOICEMAIL_EVENT" },
  { no: 3, name: "LOCATION_UPDATE_EVENT" },
  { no: 4, name: "COUNTRY_CHANGE_EVENT" },
  { no: 5, name: "TOKEN_AUDIT_EVENT" },
  { no: 6, name: "SMS_EVENT" },
  { no: 7, name: "SMS_DELIVERY_REPORT_EVENT" },
  { no: 8, name: "CONSENT_REVOKE_EVENT" },
  { no: 9, name: "HANDSET_UPDATE_EVENT" },
  { no: 10, name: "FIRST_ATTACHMENT_EVENT" },
  { no: 11, name: "PERIODIC_COUNTRY_EVENT" },
]);

/**
 * @generated from message wgtwo.events.v0.ManualAckConfig
 */
export class ManualAckConfig extends Message<ManualAckConfig> {
  /**
   * @generated from field: bool enable = 1;
   */
  enable = false;

  /**
   * @generated from field: google.protobuf.Duration timeout = 2;
   */
  timeout?: Duration;

  constructor(data?: PartialMessage<ManualAckConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.ManualAckConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "timeout", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ManualAckConfig {
    return new ManualAckConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ManualAckConfig {
    return new ManualAckConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ManualAckConfig {
    return new ManualAckConfig().fromJsonString(jsonString, options);
  }

  static equals(a: ManualAckConfig | PlainMessage<ManualAckConfig> | undefined, b: ManualAckConfig | PlainMessage<ManualAckConfig> | undefined): boolean {
    return proto3.util.equals(ManualAckConfig, a, b);
  }
}

/**
 * @generated from message wgtwo.events.v0.SubscribeEventsRequest
 */
export class SubscribeEventsRequest extends Message<SubscribeEventsRequest> {
  /**
   * @generated from field: repeated wgtwo.events.v0.EventType type = 1;
   */
  type: EventType[] = [];

  /**
   * @generated from oneof wgtwo.events.v0.SubscribeEventsRequest.start_position
   */
  startPosition: {
    /**
     * @generated from field: uint64 start_at_sequence = 2;
     */
    value: bigint;
    case: "startAtSequence";
  } | {
    /**
     * @generated from field: google.protobuf.Timestamp start_at_timestamp = 3;
     */
    value: Timestamp;
    case: "startAtTimestamp";
  } | {
    /**
     * @generated from field: google.protobuf.Duration start_at_time_delta = 4;
     */
    value: Duration;
    case: "startAtTimeDelta";
  } | {
    /**
     * @generated from field: google.protobuf.Empty start_with_last_received = 5;
     */
    value: Empty;
    case: "startWithLastReceived";
  } | {
    /**
     * @generated from field: google.protobuf.Empty start_at_oldest_possible = 11;
     */
    value: Empty;
    case: "startAtOldestPossible";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: string client_id = 6;
   */
  clientId = "";

  /**
   * @generated from field: string queue_name = 7;
   */
  queueName = "";

  /**
   * @generated from field: string durable_name = 8;
   */
  durableName = "";

  /**
   * @generated from field: uint32 max_in_flight = 9;
   */
  maxInFlight = 0;

  /**
   * @generated from field: wgtwo.events.v0.ManualAckConfig manual_ack = 10;
   */
  manualAck?: ManualAckConfig;

  constructor(data?: PartialMessage<SubscribeEventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.SubscribeEventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(EventType), repeated: true },
    { no: 2, name: "start_at_sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "start_position" },
    { no: 3, name: "start_at_timestamp", kind: "message", T: Timestamp, oneof: "start_position" },
    { no: 4, name: "start_at_time_delta", kind: "message", T: Duration, oneof: "start_position" },
    { no: 5, name: "start_with_last_received", kind: "message", T: Empty, oneof: "start_position" },
    { no: 11, name: "start_at_oldest_possible", kind: "message", T: Empty, oneof: "start_position" },
    { no: 6, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "queue_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "durable_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "max_in_flight", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 10, name: "manual_ack", kind: "message", T: ManualAckConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribeEventsRequest {
    return new SubscribeEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribeEventsRequest {
    return new SubscribeEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribeEventsRequest {
    return new SubscribeEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribeEventsRequest | PlainMessage<SubscribeEventsRequest> | undefined, b: SubscribeEventsRequest | PlainMessage<SubscribeEventsRequest> | undefined): boolean {
    return proto3.util.equals(SubscribeEventsRequest, a, b);
  }
}

/**
 * @generated from message wgtwo.events.v0.SubscribeEventsResponse
 */
export class SubscribeEventsResponse extends Message<SubscribeEventsResponse> {
  /**
   * @generated from field: wgtwo.events.v0.Event event = 1;
   */
  event?: Event;

  constructor(data?: PartialMessage<SubscribeEventsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.SubscribeEventsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event", kind: "message", T: Event },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribeEventsResponse {
    return new SubscribeEventsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribeEventsResponse {
    return new SubscribeEventsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribeEventsResponse {
    return new SubscribeEventsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribeEventsResponse | PlainMessage<SubscribeEventsResponse> | undefined, b: SubscribeEventsResponse | PlainMessage<SubscribeEventsResponse> | undefined): boolean {
    return proto3.util.equals(SubscribeEventsResponse, a, b);
  }
}

/**
 * @generated from message wgtwo.events.v0.AckRequest
 */
export class AckRequest extends Message<AckRequest> {
  /**
   * @generated from field: string inbox = 1;
   */
  inbox = "";

  /**
   * @generated from field: uint64 sequence = 2;
   */
  sequence = protoInt64.zero;

  constructor(data?: PartialMessage<AckRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.AckRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "inbox", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AckRequest {
    return new AckRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AckRequest {
    return new AckRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AckRequest {
    return new AckRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AckRequest | PlainMessage<AckRequest> | undefined, b: AckRequest | PlainMessage<AckRequest> | undefined): boolean {
    return proto3.util.equals(AckRequest, a, b);
  }
}

/**
 * @generated from message wgtwo.events.v0.AckResponse
 */
export class AckResponse extends Message<AckResponse> {
  constructor(data?: PartialMessage<AckResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.AckResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AckResponse {
    return new AckResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AckResponse {
    return new AckResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AckResponse {
    return new AckResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AckResponse | PlainMessage<AckResponse> | undefined, b: AckResponse | PlainMessage<AckResponse> | undefined): boolean {
    return proto3.util.equals(AckResponse, a, b);
  }
}

/**
 * @generated from message wgtwo.events.v0.EventMetadata
 */
export class EventMetadata extends Message<EventMetadata> {
  /**
   * @generated from field: uint64 sequence = 1;
   */
  sequence = protoInt64.zero;

  /**
   * @generated from field: bool is_redelivered = 2;
   */
  isRedelivered = false;

  /**
   * @generated from field: string ack_inbox = 3;
   */
  ackInbox = "";

  constructor(data?: PartialMessage<EventMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.EventMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "is_redelivered", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "ack_inbox", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventMetadata {
    return new EventMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventMetadata {
    return new EventMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventMetadata {
    return new EventMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: EventMetadata | PlainMessage<EventMetadata> | undefined, b: EventMetadata | PlainMessage<EventMetadata> | undefined): boolean {
    return proto3.util.equals(EventMetadata, a, b);
  }
}

/**
 * @generated from message wgtwo.events.v0.Owner
 */
export class Owner extends Message<Owner> {
  /**
   * @generated from field: wgtwo.common.v0.PhoneNumber phone_number = 1;
   */
  phoneNumber?: PhoneNumber;

  /**
   * @generated from field: string sub = 2;
   */
  sub = "";

  constructor(data?: PartialMessage<Owner>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.Owner";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "phone_number", kind: "message", T: PhoneNumber },
    { no: 2, name: "sub", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Owner {
    return new Owner().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Owner {
    return new Owner().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Owner {
    return new Owner().fromJsonString(jsonString, options);
  }

  static equals(a: Owner | PlainMessage<Owner> | undefined, b: Owner | PlainMessage<Owner> | undefined): boolean {
    return proto3.util.equals(Owner, a, b);
  }
}

/**
 * @generated from message wgtwo.events.v0.Event
 */
export class Event extends Message<Event> {
  /**
   * @generated from field: wgtwo.events.v0.EventMetadata metadata = 1;
   */
  metadata?: EventMetadata;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: string service_id = 3;
   */
  serviceId = "";

  /**
   * @generated from oneof wgtwo.events.v0.Event.event
   */
  event: {
    /**
     * @generated from field: wgtwo.events.v0.VoiceEvent voice_event = 4;
     */
    value: VoiceEvent;
    case: "voiceEvent";
  } | {
    /**
     * @generated from field: wgtwo.events.v0.VoicemailEvent voicemail_event = 5;
     */
    value: VoicemailEvent;
    case: "voicemailEvent";
  } | {
    /**
     * @generated from field: wgtwo.events.v0.LocationUpdateEvent location_update_event = 6;
     */
    value: LocationUpdateEvent;
    case: "locationUpdateEvent";
  } | {
    /**
     * @generated from field: wgtwo.events.v0.CountryChangeEvent country_change_event = 7;
     */
    value: CountryChangeEvent;
    case: "countryChangeEvent";
  } | {
    /**
     * @generated from field: wgtwo.events.v0.TokenAuditEvent token_audit_event = 8;
     */
    value: TokenAuditEvent;
    case: "tokenAuditEvent";
  } | {
    /**
     * @generated from field: wgtwo.events.v0.SmsEvent sms_event = 9;
     */
    value: SmsEvent;
    case: "smsEvent";
  } | {
    /**
     * @generated from field: wgtwo.events.v0.SmsDeliveryReportEvent sms_delivery_report_event = 10;
     */
    value: SmsDeliveryReportEvent;
    case: "smsDeliveryReportEvent";
  } | {
    /**
     * @generated from field: wgtwo.events.v0.ConsentRevokeEvent consent_revoke_event = 11;
     */
    value: ConsentRevokeEvent;
    case: "consentRevokeEvent";
  } | {
    /**
     * @generated from field: wgtwo.events.v0.HandsetUpdateEvent handset_update_event = 13;
     */
    value: HandsetUpdateEvent;
    case: "handsetUpdateEvent";
  } | {
    /**
     * @generated from field: wgtwo.events.v0.FirstAttachmentEvent first_attachment_event = 14;
     */
    value: FirstAttachmentEvent;
    case: "firstAttachmentEvent";
  } | {
    /**
     * @generated from field: wgtwo.events.v0.PeriodicCountryEvent periodic_country_event = 15;
     */
    value: PeriodicCountryEvent;
    case: "periodicCountryEvent";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: wgtwo.events.v0.Owner owner = 12;
   */
  owner?: Owner;

  constructor(data?: PartialMessage<Event>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.Event";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: EventMetadata },
    { no: 2, name: "timestamp", kind: "message", T: Timestamp },
    { no: 3, name: "service_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "voice_event", kind: "message", T: VoiceEvent, oneof: "event" },
    { no: 5, name: "voicemail_event", kind: "message", T: VoicemailEvent, oneof: "event" },
    { no: 6, name: "location_update_event", kind: "message", T: LocationUpdateEvent, oneof: "event" },
    { no: 7, name: "country_change_event", kind: "message", T: CountryChangeEvent, oneof: "event" },
    { no: 8, name: "token_audit_event", kind: "message", T: TokenAuditEvent, oneof: "event" },
    { no: 9, name: "sms_event", kind: "message", T: SmsEvent, oneof: "event" },
    { no: 10, name: "sms_delivery_report_event", kind: "message", T: SmsDeliveryReportEvent, oneof: "event" },
    { no: 11, name: "consent_revoke_event", kind: "message", T: ConsentRevokeEvent, oneof: "event" },
    { no: 13, name: "handset_update_event", kind: "message", T: HandsetUpdateEvent, oneof: "event" },
    { no: 14, name: "first_attachment_event", kind: "message", T: FirstAttachmentEvent, oneof: "event" },
    { no: 15, name: "periodic_country_event", kind: "message", T: PeriodicCountryEvent, oneof: "event" },
    { no: 12, name: "owner", kind: "message", T: Owner },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event {
    return new Event().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJsonString(jsonString, options);
  }

  static equals(a: Event | PlainMessage<Event> | undefined, b: Event | PlainMessage<Event> | undefined): boolean {
    return proto3.util.equals(Event, a, b);
  }
}

/**
 * @generated from message wgtwo.events.v0.ConsentRevokeEvent
 */
export class ConsentRevokeEvent extends Message<ConsentRevokeEvent> {
  /**
   * @generated from field: wgtwo.common.v0.PhoneNumber msisdn = 1;
   */
  msisdn?: PhoneNumber;

  constructor(data?: PartialMessage<ConsentRevokeEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.ConsentRevokeEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msisdn", kind: "message", T: PhoneNumber },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConsentRevokeEvent {
    return new ConsentRevokeEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConsentRevokeEvent {
    return new ConsentRevokeEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConsentRevokeEvent {
    return new ConsentRevokeEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ConsentRevokeEvent | PlainMessage<ConsentRevokeEvent> | undefined, b: ConsentRevokeEvent | PlainMessage<ConsentRevokeEvent> | undefined): boolean {
    return proto3.util.equals(ConsentRevokeEvent, a, b);
  }
}

/**
 * @generated from message wgtwo.events.v0.VoiceEvent
 */
export class VoiceEvent extends Message<VoiceEvent> {
  /**
   * @generated from field: string call_id = 1;
   */
  callId = "";

  /**
   * @generated from field: wgtwo.events.v0.VoiceEvent.VoiceEventType type = 2;
   */
  type = VoiceEvent_VoiceEventType.UNSPECIFIED;

  /**
   * @generated from field: wgtwo.common.v0.PhoneNumber from_number = 3;
   */
  fromNumber?: PhoneNumber;

  /**
   * @generated from field: wgtwo.common.v0.PhoneNumber to_number = 4;
   */
  toNumber?: PhoneNumber;

  /**
   * @generated from field: bool caller_id_hidden = 6;
   */
  callerIdHidden = false;

  constructor(data?: PartialMessage<VoiceEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.VoiceEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "call_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(VoiceEvent_VoiceEventType) },
    { no: 3, name: "from_number", kind: "message", T: PhoneNumber },
    { no: 4, name: "to_number", kind: "message", T: PhoneNumber },
    { no: 6, name: "caller_id_hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoiceEvent {
    return new VoiceEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoiceEvent {
    return new VoiceEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoiceEvent {
    return new VoiceEvent().fromJsonString(jsonString, options);
  }

  static equals(a: VoiceEvent | PlainMessage<VoiceEvent> | undefined, b: VoiceEvent | PlainMessage<VoiceEvent> | undefined): boolean {
    return proto3.util.equals(VoiceEvent, a, b);
  }
}

/**
 * @generated from enum wgtwo.events.v0.VoiceEvent.VoiceEventType
 */
export enum VoiceEvent_VoiceEventType {
  /**
   * @generated from enum value: UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CALL_INITIATED = 1;
   */
  CALL_INITIATED = 1,

  /**
   * @generated from enum value: CALL_RINGING = 2;
   */
  CALL_RINGING = 2,

  /**
   * @generated from enum value: CALL_ANSWERED = 3;
   */
  CALL_ANSWERED = 3,

  /**
   * @generated from enum value: CALL_ENDED = 4;
   */
  CALL_ENDED = 4,

  /**
   * @generated from enum value: CALL_FWD_VOICEMAIL = 5;
   */
  CALL_FWD_VOICEMAIL = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(VoiceEvent_VoiceEventType)
proto3.util.setEnumType(VoiceEvent_VoiceEventType, "wgtwo.events.v0.VoiceEvent.VoiceEventType", [
  { no: 0, name: "UNSPECIFIED" },
  { no: 1, name: "CALL_INITIATED" },
  { no: 2, name: "CALL_RINGING" },
  { no: 3, name: "CALL_ANSWERED" },
  { no: 4, name: "CALL_ENDED" },
  { no: 5, name: "CALL_FWD_VOICEMAIL" },
]);

/**
 * @generated from message wgtwo.events.v0.VoicemailEvent
 */
export class VoicemailEvent extends Message<VoicemailEvent> {
  /**
   * @generated from field: string voicemail_id = 1;
   */
  voicemailId = "";

  /**
   * @generated from field: wgtwo.events.v0.VoicemailEvent.VoicemailEventType type = 2;
   */
  type = VoicemailEvent_VoicemailEventType.UNSPECIFIED;

  /**
   * @generated from field: wgtwo.common.v0.PhoneNumber from_number = 3;
   */
  fromNumber?: PhoneNumber;

  /**
   * @generated from field: wgtwo.common.v0.PhoneNumber to_number = 4;
   */
  toNumber?: PhoneNumber;

  constructor(data?: PartialMessage<VoicemailEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.VoicemailEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "voicemail_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(VoicemailEvent_VoicemailEventType) },
    { no: 3, name: "from_number", kind: "message", T: PhoneNumber },
    { no: 4, name: "to_number", kind: "message", T: PhoneNumber },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoicemailEvent {
    return new VoicemailEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoicemailEvent {
    return new VoicemailEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoicemailEvent {
    return new VoicemailEvent().fromJsonString(jsonString, options);
  }

  static equals(a: VoicemailEvent | PlainMessage<VoicemailEvent> | undefined, b: VoicemailEvent | PlainMessage<VoicemailEvent> | undefined): boolean {
    return proto3.util.equals(VoicemailEvent, a, b);
  }
}

/**
 * @generated from enum wgtwo.events.v0.VoicemailEvent.VoicemailEventType
 */
export enum VoicemailEvent_VoicemailEventType {
  /**
   * @generated from enum value: UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: NEW_VOICEMAIL = 1;
   */
  NEW_VOICEMAIL = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(VoicemailEvent_VoicemailEventType)
proto3.util.setEnumType(VoicemailEvent_VoicemailEventType, "wgtwo.events.v0.VoicemailEvent.VoicemailEventType", [
  { no: 0, name: "UNSPECIFIED" },
  { no: 1, name: "NEW_VOICEMAIL" },
]);

/**
 * @generated from message wgtwo.events.v0.LocationUpdateEvent
 */
export class LocationUpdateEvent extends Message<LocationUpdateEvent> {
  /**
   * @generated from field: wgtwo.common.v0.PhoneNumber number = 2;
   */
  number?: PhoneNumber;

  /**
   * @generated from field: wgtwo.events.v0.LocationUpdateEvent.Locations previous = 3;
   */
  previous?: LocationUpdateEvent_Locations;

  /**
   * @generated from field: wgtwo.events.v0.LocationUpdateEvent.Locations current = 4;
   */
  current?: LocationUpdateEvent_Locations;

  constructor(data?: PartialMessage<LocationUpdateEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.LocationUpdateEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "number", kind: "message", T: PhoneNumber },
    { no: 3, name: "previous", kind: "message", T: LocationUpdateEvent_Locations },
    { no: 4, name: "current", kind: "message", T: LocationUpdateEvent_Locations },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocationUpdateEvent {
    return new LocationUpdateEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocationUpdateEvent {
    return new LocationUpdateEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocationUpdateEvent {
    return new LocationUpdateEvent().fromJsonString(jsonString, options);
  }

  static equals(a: LocationUpdateEvent | PlainMessage<LocationUpdateEvent> | undefined, b: LocationUpdateEvent | PlainMessage<LocationUpdateEvent> | undefined): boolean {
    return proto3.util.equals(LocationUpdateEvent, a, b);
  }
}

/**
 * (see section 5 in Numbering, Addressing and Identification)
 * A GT is a phone number formatted according to E.164 that is used to identify MSCs,
 * VLRs, HLRs, SGSNs and other nodes for routing purposes.
 *
 * @generated from message wgtwo.events.v0.LocationUpdateEvent.GlobalTitle
 */
export class LocationUpdateEvent_GlobalTitle extends Message<LocationUpdateEvent_GlobalTitle> {
  /**
   * @generated from field: string value = 1;
   */
  value = "";

  constructor(data?: PartialMessage<LocationUpdateEvent_GlobalTitle>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.LocationUpdateEvent.GlobalTitle";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocationUpdateEvent_GlobalTitle {
    return new LocationUpdateEvent_GlobalTitle().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocationUpdateEvent_GlobalTitle {
    return new LocationUpdateEvent_GlobalTitle().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocationUpdateEvent_GlobalTitle {
    return new LocationUpdateEvent_GlobalTitle().fromJsonString(jsonString, options);
  }

  static equals(a: LocationUpdateEvent_GlobalTitle | PlainMessage<LocationUpdateEvent_GlobalTitle> | undefined, b: LocationUpdateEvent_GlobalTitle | PlainMessage<LocationUpdateEvent_GlobalTitle> | undefined): boolean {
    return proto3.util.equals(LocationUpdateEvent_GlobalTitle, a, b);
  }
}

/**
 * Fully Qualified Domain Name
 * The format commonly used for representing an MME address
 *
 * @generated from message wgtwo.events.v0.LocationUpdateEvent.Fqdn
 */
export class LocationUpdateEvent_Fqdn extends Message<LocationUpdateEvent_Fqdn> {
  /**
   * @generated from field: string value = 1;
   */
  value = "";

  constructor(data?: PartialMessage<LocationUpdateEvent_Fqdn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.LocationUpdateEvent.Fqdn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocationUpdateEvent_Fqdn {
    return new LocationUpdateEvent_Fqdn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocationUpdateEvent_Fqdn {
    return new LocationUpdateEvent_Fqdn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocationUpdateEvent_Fqdn {
    return new LocationUpdateEvent_Fqdn().fromJsonString(jsonString, options);
  }

  static equals(a: LocationUpdateEvent_Fqdn | PlainMessage<LocationUpdateEvent_Fqdn> | undefined, b: LocationUpdateEvent_Fqdn | PlainMessage<LocationUpdateEvent_Fqdn> | undefined): boolean {
    return proto3.util.equals(LocationUpdateEvent_Fqdn, a, b);
  }
}

/**
 * @generated from message wgtwo.events.v0.LocationUpdateEvent.Locations
 */
export class LocationUpdateEvent_Locations extends Message<LocationUpdateEvent_Locations> {
  /**
   * @generated from field: wgtwo.events.v0.LocationUpdateEvent.GlobalTitle msc = 1;
   */
  msc?: LocationUpdateEvent_GlobalTitle;

  /**
   * @generated from field: wgtwo.events.v0.LocationUpdateEvent.GlobalTitle vlr = 2;
   */
  vlr?: LocationUpdateEvent_GlobalTitle;

  /**
   * @generated from field: wgtwo.events.v0.LocationUpdateEvent.GlobalTitle sgsn = 3;
   */
  sgsn?: LocationUpdateEvent_GlobalTitle;

  /**
   * @generated from field: wgtwo.events.v0.LocationUpdateEvent.Fqdn mme = 4;
   */
  mme?: LocationUpdateEvent_Fqdn;

  constructor(data?: PartialMessage<LocationUpdateEvent_Locations>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.LocationUpdateEvent.Locations";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "msc", kind: "message", T: LocationUpdateEvent_GlobalTitle },
    { no: 2, name: "vlr", kind: "message", T: LocationUpdateEvent_GlobalTitle },
    { no: 3, name: "sgsn", kind: "message", T: LocationUpdateEvent_GlobalTitle },
    { no: 4, name: "mme", kind: "message", T: LocationUpdateEvent_Fqdn },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocationUpdateEvent_Locations {
    return new LocationUpdateEvent_Locations().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocationUpdateEvent_Locations {
    return new LocationUpdateEvent_Locations().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocationUpdateEvent_Locations {
    return new LocationUpdateEvent_Locations().fromJsonString(jsonString, options);
  }

  static equals(a: LocationUpdateEvent_Locations | PlainMessage<LocationUpdateEvent_Locations> | undefined, b: LocationUpdateEvent_Locations | PlainMessage<LocationUpdateEvent_Locations> | undefined): boolean {
    return proto3.util.equals(LocationUpdateEvent_Locations, a, b);
  }
}

/**
 * @generated from message wgtwo.events.v0.FirstAttachmentEvent
 */
export class FirstAttachmentEvent extends Message<FirstAttachmentEvent> {
  /**
   * @generated from field: wgtwo.common.v0.PhoneNumber number = 1;
   */
  number?: PhoneNumber;

  /**
   * @generated from field: wgtwo.events.v0.Imsi imsi = 2;
   */
  imsi?: Imsi;

  constructor(data?: PartialMessage<FirstAttachmentEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.FirstAttachmentEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "number", kind: "message", T: PhoneNumber },
    { no: 2, name: "imsi", kind: "message", T: Imsi },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FirstAttachmentEvent {
    return new FirstAttachmentEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FirstAttachmentEvent {
    return new FirstAttachmentEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FirstAttachmentEvent {
    return new FirstAttachmentEvent().fromJsonString(jsonString, options);
  }

  static equals(a: FirstAttachmentEvent | PlainMessage<FirstAttachmentEvent> | undefined, b: FirstAttachmentEvent | PlainMessage<FirstAttachmentEvent> | undefined): boolean {
    return proto3.util.equals(FirstAttachmentEvent, a, b);
  }
}

/**
 * @generated from message wgtwo.events.v0.PeriodicCountryEvent
 */
export class PeriodicCountryEvent extends Message<PeriodicCountryEvent> {
  /**
   * @generated from field: wgtwo.common.v0.PhoneNumber number = 1;
   */
  number?: PhoneNumber;

  /**
   * @generated from field: wgtwo.events.v0.Imsi imsi = 2;
   */
  imsi?: Imsi;

  /**
   * @generated from field: wgtwo.events.v0.CountryChangeEvent.Country country = 3;
   */
  country?: CountryChangeEvent_Country;

  constructor(data?: PartialMessage<PeriodicCountryEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.PeriodicCountryEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "number", kind: "message", T: PhoneNumber },
    { no: 2, name: "imsi", kind: "message", T: Imsi },
    { no: 3, name: "country", kind: "message", T: CountryChangeEvent_Country },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PeriodicCountryEvent {
    return new PeriodicCountryEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PeriodicCountryEvent {
    return new PeriodicCountryEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PeriodicCountryEvent {
    return new PeriodicCountryEvent().fromJsonString(jsonString, options);
  }

  static equals(a: PeriodicCountryEvent | PlainMessage<PeriodicCountryEvent> | undefined, b: PeriodicCountryEvent | PlainMessage<PeriodicCountryEvent> | undefined): boolean {
    return proto3.util.equals(PeriodicCountryEvent, a, b);
  }
}

/**
 * @generated from message wgtwo.events.v0.CountryChangeEvent
 */
export class CountryChangeEvent extends Message<CountryChangeEvent> {
  /**
   * @generated from field: wgtwo.common.v0.PhoneNumber msisdn = 2;
   */
  msisdn?: PhoneNumber;

  /**
   * @generated from field: wgtwo.events.v0.CountryChangeEvent.Country previous = 3;
   */
  previous?: CountryChangeEvent_Country;

  /**
   * @generated from field: wgtwo.events.v0.CountryChangeEvent.Country current = 4;
   */
  current?: CountryChangeEvent_Country;

  constructor(data?: PartialMessage<CountryChangeEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.CountryChangeEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "msisdn", kind: "message", T: PhoneNumber },
    { no: 3, name: "previous", kind: "message", T: CountryChangeEvent_Country },
    { no: 4, name: "current", kind: "message", T: CountryChangeEvent_Country },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountryChangeEvent {
    return new CountryChangeEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountryChangeEvent {
    return new CountryChangeEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountryChangeEvent {
    return new CountryChangeEvent().fromJsonString(jsonString, options);
  }

  static equals(a: CountryChangeEvent | PlainMessage<CountryChangeEvent> | undefined, b: CountryChangeEvent | PlainMessage<CountryChangeEvent> | undefined): boolean {
    return proto3.util.equals(CountryChangeEvent, a, b);
  }
}

/**
 * @generated from message wgtwo.events.v0.CountryChangeEvent.Country
 */
export class CountryChangeEvent_Country extends Message<CountryChangeEvent_Country> {
  /**
   * @generated from field: string code = 1;
   */
  code = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<CountryChangeEvent_Country>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.CountryChangeEvent.Country";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountryChangeEvent_Country {
    return new CountryChangeEvent_Country().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountryChangeEvent_Country {
    return new CountryChangeEvent_Country().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountryChangeEvent_Country {
    return new CountryChangeEvent_Country().fromJsonString(jsonString, options);
  }

  static equals(a: CountryChangeEvent_Country | PlainMessage<CountryChangeEvent_Country> | undefined, b: CountryChangeEvent_Country | PlainMessage<CountryChangeEvent_Country> | undefined): boolean {
    return proto3.util.equals(CountryChangeEvent_Country, a, b);
  }
}

/**
 * @generated from message wgtwo.events.v0.TokenAuditEvent
 */
export class TokenAuditEvent extends Message<TokenAuditEvent> {
  /**
   * @generated from field: wgtwo.events.v0.TokenAuditEvent.Operation operation = 1;
   */
  operation = TokenAuditEvent_Operation.UNDEFINED;

  /**
   * @generated from oneof wgtwo.events.v0.TokenAuditEvent.token_changed
   */
  tokenChanged: {
    /**
     * @generated from field: wgtwo.events.v0.TokenAuditEvent.OperatorTokenChanged operator_token = 2;
     */
    value: TokenAuditEvent_OperatorTokenChanged;
    case: "operatorToken";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<TokenAuditEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.TokenAuditEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operation", kind: "enum", T: proto3.getEnumType(TokenAuditEvent_Operation) },
    { no: 2, name: "operator_token", kind: "message", T: TokenAuditEvent_OperatorTokenChanged, oneof: "token_changed" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenAuditEvent {
    return new TokenAuditEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenAuditEvent {
    return new TokenAuditEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenAuditEvent {
    return new TokenAuditEvent().fromJsonString(jsonString, options);
  }

  static equals(a: TokenAuditEvent | PlainMessage<TokenAuditEvent> | undefined, b: TokenAuditEvent | PlainMessage<TokenAuditEvent> | undefined): boolean {
    return proto3.util.equals(TokenAuditEvent, a, b);
  }
}

/**
 * @generated from enum wgtwo.events.v0.TokenAuditEvent.Operation
 */
export enum TokenAuditEvent_Operation {
  /**
   * @generated from enum value: UNDEFINED = 0;
   */
  UNDEFINED = 0,

  /**
   * @generated from enum value: CREATED = 1;
   */
  CREATED = 1,

  /**
   * @generated from enum value: MODIFIED = 2;
   */
  MODIFIED = 2,

  /**
   * @generated from enum value: DELETED = 3;
   */
  DELETED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(TokenAuditEvent_Operation)
proto3.util.setEnumType(TokenAuditEvent_Operation, "wgtwo.events.v0.TokenAuditEvent.Operation", [
  { no: 0, name: "UNDEFINED" },
  { no: 1, name: "CREATED" },
  { no: 2, name: "MODIFIED" },
  { no: 3, name: "DELETED" },
]);

/**
 * @generated from message wgtwo.events.v0.TokenAuditEvent.OperatorTokenMetadata
 */
export class TokenAuditEvent_OperatorTokenMetadata extends Message<TokenAuditEvent_OperatorTokenMetadata> {
  /**
   * @generated from field: string client_id = 1;
   */
  clientId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: repeated string rights = 3;
   */
  rights: string[] = [];

  constructor(data?: PartialMessage<TokenAuditEvent_OperatorTokenMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.TokenAuditEvent.OperatorTokenMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "rights", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenAuditEvent_OperatorTokenMetadata {
    return new TokenAuditEvent_OperatorTokenMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenAuditEvent_OperatorTokenMetadata {
    return new TokenAuditEvent_OperatorTokenMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenAuditEvent_OperatorTokenMetadata {
    return new TokenAuditEvent_OperatorTokenMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: TokenAuditEvent_OperatorTokenMetadata | PlainMessage<TokenAuditEvent_OperatorTokenMetadata> | undefined, b: TokenAuditEvent_OperatorTokenMetadata | PlainMessage<TokenAuditEvent_OperatorTokenMetadata> | undefined): boolean {
    return proto3.util.equals(TokenAuditEvent_OperatorTokenMetadata, a, b);
  }
}

/**
 * @generated from message wgtwo.events.v0.TokenAuditEvent.OperatorTokenChanged
 */
export class TokenAuditEvent_OperatorTokenChanged extends Message<TokenAuditEvent_OperatorTokenChanged> {
  /**
   * @generated from field: wgtwo.events.v0.TokenAuditEvent.OperatorTokenMetadata new = 1;
   */
  new?: TokenAuditEvent_OperatorTokenMetadata;

  /**
   * @generated from field: wgtwo.events.v0.TokenAuditEvent.OperatorTokenMetadata old = 2;
   */
  old?: TokenAuditEvent_OperatorTokenMetadata;

  constructor(data?: PartialMessage<TokenAuditEvent_OperatorTokenChanged>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.TokenAuditEvent.OperatorTokenChanged";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "new", kind: "message", T: TokenAuditEvent_OperatorTokenMetadata },
    { no: 2, name: "old", kind: "message", T: TokenAuditEvent_OperatorTokenMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenAuditEvent_OperatorTokenChanged {
    return new TokenAuditEvent_OperatorTokenChanged().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenAuditEvent_OperatorTokenChanged {
    return new TokenAuditEvent_OperatorTokenChanged().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenAuditEvent_OperatorTokenChanged {
    return new TokenAuditEvent_OperatorTokenChanged().fromJsonString(jsonString, options);
  }

  static equals(a: TokenAuditEvent_OperatorTokenChanged | PlainMessage<TokenAuditEvent_OperatorTokenChanged> | undefined, b: TokenAuditEvent_OperatorTokenChanged | PlainMessage<TokenAuditEvent_OperatorTokenChanged> | undefined): boolean {
    return proto3.util.equals(TokenAuditEvent_OperatorTokenChanged, a, b);
  }
}

/**
 * @generated from message wgtwo.events.v0.SmsEvent
 */
export class SmsEvent extends Message<SmsEvent> {
  /**
   * *
   * Identifier referring to a unique instance of this message during its routing.
   * If the message is delivered multiple times to the same receiver, this ID will be different.
   * See uuid that is constant across all routes.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from oneof wgtwo.events.v0.SmsEvent.from_address
   */
  fromAddress: {
    /**
     * @generated from field: wgtwo.common.v0.PhoneNumber from_e164 = 2;
     */
    value: PhoneNumber;
    case: "fromE164";
  } | {
    /**
     * @generated from field: wgtwo.common.v0.NationalPhoneNumber from_national_phone_number = 3;
     */
    value: NationalPhoneNumber;
    case: "fromNationalPhoneNumber";
  } | {
    /**
     * @generated from field: wgtwo.common.v0.TextAddress from_text_address = 4;
     */
    value: TextAddress;
    case: "fromTextAddress";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from oneof wgtwo.events.v0.SmsEvent.to_address
   */
  toAddress: {
    /**
     * @generated from field: wgtwo.common.v0.PhoneNumber to_e164 = 5;
     */
    value: PhoneNumber;
    case: "toE164";
  } | {
    /**
     * @generated from field: wgtwo.common.v0.NationalPhoneNumber to_national_phone_number = 6;
     */
    value: NationalPhoneNumber;
    case: "toNationalPhoneNumber";
  } | {
    /**
     * @generated from field: wgtwo.common.v0.TextAddress to_text_address = 7;
     */
    value: TextAddress;
    case: "toTextAddress";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: wgtwo.events.v0.SmsEvent.Direction direction = 8;
   */
  direction = SmsEvent_Direction.UNKNOWN;

  /**
   * @generated from oneof wgtwo.events.v0.SmsEvent.content
   */
  content: {
    /**
     * @generated from field: string text = 9;
     */
    value: string;
    case: "text";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * *
   * Unique identifier of a message.
   * If the message is delivered multiple times to the same receiver, this uuid will remain the same.
   *
   * @generated from field: string uuid = 10;
   */
  uuid = "";

  constructor(data?: PartialMessage<SmsEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.SmsEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from_e164", kind: "message", T: PhoneNumber, oneof: "from_address" },
    { no: 3, name: "from_national_phone_number", kind: "message", T: NationalPhoneNumber, oneof: "from_address" },
    { no: 4, name: "from_text_address", kind: "message", T: TextAddress, oneof: "from_address" },
    { no: 5, name: "to_e164", kind: "message", T: PhoneNumber, oneof: "to_address" },
    { no: 6, name: "to_national_phone_number", kind: "message", T: NationalPhoneNumber, oneof: "to_address" },
    { no: 7, name: "to_text_address", kind: "message", T: TextAddress, oneof: "to_address" },
    { no: 8, name: "direction", kind: "enum", T: proto3.getEnumType(SmsEvent_Direction) },
    { no: 9, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "content" },
    { no: 10, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SmsEvent {
    return new SmsEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SmsEvent {
    return new SmsEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SmsEvent {
    return new SmsEvent().fromJsonString(jsonString, options);
  }

  static equals(a: SmsEvent | PlainMessage<SmsEvent> | undefined, b: SmsEvent | PlainMessage<SmsEvent> | undefined): boolean {
    return proto3.util.equals(SmsEvent, a, b);
  }
}

/**
 * @generated from enum wgtwo.events.v0.SmsEvent.Direction
 */
export enum SmsEvent_Direction {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: FROM_SUBSCRIBER = 1;
   */
  FROM_SUBSCRIBER = 1,

  /**
   * @generated from enum value: TO_SUBSCRIBER = 2;
   */
  TO_SUBSCRIBER = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(SmsEvent_Direction)
proto3.util.setEnumType(SmsEvent_Direction, "wgtwo.events.v0.SmsEvent.Direction", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "FROM_SUBSCRIBER" },
  { no: 2, name: "TO_SUBSCRIBER" },
]);

/**
 * @generated from message wgtwo.events.v0.SmsDeliveryReportEvent
 */
export class SmsDeliveryReportEvent extends Message<SmsDeliveryReportEvent> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from oneof wgtwo.events.v0.SmsDeliveryReportEvent.from_address
   */
  fromAddress: {
    /**
     * @generated from field: wgtwo.common.v0.PhoneNumber from_e164 = 2;
     */
    value: PhoneNumber;
    case: "fromE164";
  } | {
    /**
     * @generated from field: wgtwo.common.v0.NationalPhoneNumber from_national_phone_number = 3;
     */
    value: NationalPhoneNumber;
    case: "fromNationalPhoneNumber";
  } | {
    /**
     * @generated from field: wgtwo.common.v0.TextAddress from_text_address = 4;
     */
    value: TextAddress;
    case: "fromTextAddress";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from oneof wgtwo.events.v0.SmsDeliveryReportEvent.to_address
   */
  toAddress: {
    /**
     * @generated from field: wgtwo.common.v0.PhoneNumber to_e164 = 5;
     */
    value: PhoneNumber;
    case: "toE164";
  } | {
    /**
     * @generated from field: wgtwo.common.v0.NationalPhoneNumber to_national_phone_number = 6;
     */
    value: NationalPhoneNumber;
    case: "toNationalPhoneNumber";
  } | {
    /**
     * @generated from field: wgtwo.common.v0.TextAddress to_text_address = 7;
     */
    value: TextAddress;
    case: "toTextAddress";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: wgtwo.events.v0.SmsDeliveryReportEvent.Direction direction = 8;
   */
  direction = SmsDeliveryReportEvent_Direction.DIRECTION_UNKNOWN;

  /**
   * @generated from field: string sms_id = 9;
   */
  smsId = "";

  /**
   * @generated from field: wgtwo.events.v0.SmsDeliveryReportEvent.Status status = 10;
   */
  status = SmsDeliveryReportEvent_Status.STATUS_UNKNOWN;

  constructor(data?: PartialMessage<SmsDeliveryReportEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.SmsDeliveryReportEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from_e164", kind: "message", T: PhoneNumber, oneof: "from_address" },
    { no: 3, name: "from_national_phone_number", kind: "message", T: NationalPhoneNumber, oneof: "from_address" },
    { no: 4, name: "from_text_address", kind: "message", T: TextAddress, oneof: "from_address" },
    { no: 5, name: "to_e164", kind: "message", T: PhoneNumber, oneof: "to_address" },
    { no: 6, name: "to_national_phone_number", kind: "message", T: NationalPhoneNumber, oneof: "to_address" },
    { no: 7, name: "to_text_address", kind: "message", T: TextAddress, oneof: "to_address" },
    { no: 8, name: "direction", kind: "enum", T: proto3.getEnumType(SmsDeliveryReportEvent_Direction) },
    { no: 9, name: "sms_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "status", kind: "enum", T: proto3.getEnumType(SmsDeliveryReportEvent_Status) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SmsDeliveryReportEvent {
    return new SmsDeliveryReportEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SmsDeliveryReportEvent {
    return new SmsDeliveryReportEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SmsDeliveryReportEvent {
    return new SmsDeliveryReportEvent().fromJsonString(jsonString, options);
  }

  static equals(a: SmsDeliveryReportEvent | PlainMessage<SmsDeliveryReportEvent> | undefined, b: SmsDeliveryReportEvent | PlainMessage<SmsDeliveryReportEvent> | undefined): boolean {
    return proto3.util.equals(SmsDeliveryReportEvent, a, b);
  }
}

/**
 * @generated from enum wgtwo.events.v0.SmsDeliveryReportEvent.Direction
 */
export enum SmsDeliveryReportEvent_Direction {
  /**
   * @generated from enum value: DIRECTION_UNKNOWN = 0;
   */
  DIRECTION_UNKNOWN = 0,

  /**
   * @generated from enum value: FROM_SUBSCRIBER = 1;
   */
  FROM_SUBSCRIBER = 1,

  /**
   * @generated from enum value: TO_SUBSCRIBER = 2;
   */
  TO_SUBSCRIBER = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(SmsDeliveryReportEvent_Direction)
proto3.util.setEnumType(SmsDeliveryReportEvent_Direction, "wgtwo.events.v0.SmsDeliveryReportEvent.Direction", [
  { no: 0, name: "DIRECTION_UNKNOWN" },
  { no: 1, name: "FROM_SUBSCRIBER" },
  { no: 2, name: "TO_SUBSCRIBER" },
]);

/**
 * @generated from enum wgtwo.events.v0.SmsDeliveryReportEvent.Status
 */
export enum SmsDeliveryReportEvent_Status {
  /**
   * @generated from enum value: STATUS_UNKNOWN = 0;
   */
  STATUS_UNKNOWN = 0,

  /**
   * @generated from enum value: DELIVERED = 1;
   */
  DELIVERED = 1,

  /**
   * @generated from enum value: TEMPORARY_FAILURE = 2;
   */
  TEMPORARY_FAILURE = 2,

  /**
   * @generated from enum value: FINAL_FAILURE = 3;
   */
  FINAL_FAILURE = 3,

  /**
   * @generated from enum value: EXPIRED = 4;
   */
  EXPIRED = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(SmsDeliveryReportEvent_Status)
proto3.util.setEnumType(SmsDeliveryReportEvent_Status, "wgtwo.events.v0.SmsDeliveryReportEvent.Status", [
  { no: 0, name: "STATUS_UNKNOWN" },
  { no: 1, name: "DELIVERED" },
  { no: 2, name: "TEMPORARY_FAILURE" },
  { no: 3, name: "FINAL_FAILURE" },
  { no: 4, name: "EXPIRED" },
]);

/**
 * @generated from message wgtwo.events.v0.ImeiSv
 */
export class ImeiSv extends Message<ImeiSv> {
  /**
   * @generated from field: string imei = 1;
   */
  imei = "";

  /**
   * @generated from field: string software_version = 2;
   */
  softwareVersion = "";

  constructor(data?: PartialMessage<ImeiSv>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.ImeiSv";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "imei", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "software_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImeiSv {
    return new ImeiSv().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImeiSv {
    return new ImeiSv().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImeiSv {
    return new ImeiSv().fromJsonString(jsonString, options);
  }

  static equals(a: ImeiSv | PlainMessage<ImeiSv> | undefined, b: ImeiSv | PlainMessage<ImeiSv> | undefined): boolean {
    return proto3.util.equals(ImeiSv, a, b);
  }
}

/**
 * @generated from message wgtwo.events.v0.Handset
 */
export class Handset extends Message<Handset> {
  /**
   * @generated from field: wgtwo.events.v0.ImeiSv imei_sv = 1;
   */
  imeiSv?: ImeiSv;

  constructor(data?: PartialMessage<Handset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.Handset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "imei_sv", kind: "message", T: ImeiSv },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Handset {
    return new Handset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Handset {
    return new Handset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Handset {
    return new Handset().fromJsonString(jsonString, options);
  }

  static equals(a: Handset | PlainMessage<Handset> | undefined, b: Handset | PlainMessage<Handset> | undefined): boolean {
    return proto3.util.equals(Handset, a, b);
  }
}

/**
 * @generated from message wgtwo.events.v0.HandsetUpdateEvent
 */
export class HandsetUpdateEvent extends Message<HandsetUpdateEvent> {
  /**
   * @generated from field: wgtwo.events.v0.Handset previous = 1;
   */
  previous?: Handset;

  /**
   * @generated from field: wgtwo.events.v0.Handset current = 2;
   */
  current?: Handset;

  /**
   * @generated from field: wgtwo.events.v0.Imsi imsi = 3;
   */
  imsi?: Imsi;

  /**
   * @generated from field: wgtwo.common.v0.PhoneNumber number = 4;
   */
  number?: PhoneNumber;

  constructor(data?: PartialMessage<HandsetUpdateEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.HandsetUpdateEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "previous", kind: "message", T: Handset },
    { no: 2, name: "current", kind: "message", T: Handset },
    { no: 3, name: "imsi", kind: "message", T: Imsi },
    { no: 4, name: "number", kind: "message", T: PhoneNumber },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HandsetUpdateEvent {
    return new HandsetUpdateEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HandsetUpdateEvent {
    return new HandsetUpdateEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HandsetUpdateEvent {
    return new HandsetUpdateEvent().fromJsonString(jsonString, options);
  }

  static equals(a: HandsetUpdateEvent | PlainMessage<HandsetUpdateEvent> | undefined, b: HandsetUpdateEvent | PlainMessage<HandsetUpdateEvent> | undefined): boolean {
    return proto3.util.equals(HandsetUpdateEvent, a, b);
  }
}

/**
 * @generated from message wgtwo.events.v0.Imsi
 */
export class Imsi extends Message<Imsi> {
  /**
   * @generated from field: string value = 1;
   */
  value = "";

  constructor(data?: PartialMessage<Imsi>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.events.v0.Imsi";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Imsi {
    return new Imsi().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Imsi {
    return new Imsi().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Imsi {
    return new Imsi().fromJsonString(jsonString, options);
  }

  static equals(a: Imsi | PlainMessage<Imsi> | undefined, b: Imsi | PlainMessage<Imsi> | undefined): boolean {
    return proto3.util.equals(Imsi, a, b);
  }
}

