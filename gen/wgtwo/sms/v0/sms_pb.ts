// Copyright 2020 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file wgtwo/sms/v0/sms.proto (package wgtwo.sms.v0, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { NationalPhoneNumber, PhoneNumber, TextAddress } from "../../common/v0/phonenumber_pb.js";

/**
 * @generated from message wgtwo.sms.v0.SendTextAsOperatorRequest
 */
export class SendTextAsOperatorRequest extends Message<SendTextAsOperatorRequest> {
  /**
   * @generated from field: string content = 1;
   */
  content = "";

  /**
   * @generated from field: wgtwo.common.v0.TextAddress from_operator_address = 2;
   */
  fromOperatorAddress?: TextAddress;

  /**
   * @generated from field: wgtwo.common.v0.PhoneNumber to_subscriber = 3;
   */
  toSubscriber?: PhoneNumber;

  constructor(data?: PartialMessage<SendTextAsOperatorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.sms.v0.SendTextAsOperatorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from_operator_address", kind: "message", T: TextAddress },
    { no: 3, name: "to_subscriber", kind: "message", T: PhoneNumber },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendTextAsOperatorRequest {
    return new SendTextAsOperatorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendTextAsOperatorRequest {
    return new SendTextAsOperatorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendTextAsOperatorRequest {
    return new SendTextAsOperatorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendTextAsOperatorRequest | PlainMessage<SendTextAsOperatorRequest> | undefined, b: SendTextAsOperatorRequest | PlainMessage<SendTextAsOperatorRequest> | undefined): boolean {
    return proto3.util.equals(SendTextAsOperatorRequest, a, b);
  }
}

/**
 * @generated from message wgtwo.sms.v0.SendTextAsProductRequest
 */
export class SendTextAsProductRequest extends Message<SendTextAsProductRequest> {
  /**
   * @generated from field: string content = 1;
   */
  content = "";

  /**
   * @generated from field: wgtwo.common.v0.TextAddress from_product_address = 2;
   */
  fromProductAddress?: TextAddress;

  /**
   * @generated from field: wgtwo.common.v0.PhoneNumber to_subscriber = 3;
   */
  toSubscriber?: PhoneNumber;

  constructor(data?: PartialMessage<SendTextAsProductRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.sms.v0.SendTextAsProductRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from_product_address", kind: "message", T: TextAddress },
    { no: 3, name: "to_subscriber", kind: "message", T: PhoneNumber },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendTextAsProductRequest {
    return new SendTextAsProductRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendTextAsProductRequest {
    return new SendTextAsProductRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendTextAsProductRequest {
    return new SendTextAsProductRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendTextAsProductRequest | PlainMessage<SendTextAsProductRequest> | undefined, b: SendTextAsProductRequest | PlainMessage<SendTextAsProductRequest> | undefined): boolean {
    return proto3.util.equals(SendTextAsProductRequest, a, b);
  }
}

/**
 * @generated from message wgtwo.sms.v0.SendTextToSubscriberRequest
 */
export class SendTextToSubscriberRequest extends Message<SendTextToSubscriberRequest> {
  /**
   * @generated from field: string content = 1;
   */
  content = "";

  /**
   * @generated from oneof wgtwo.sms.v0.SendTextToSubscriberRequest.from_address
   */
  fromAddress: {
    /**
     * @generated from field: wgtwo.common.v0.PhoneNumber from_e164 = 2;
     */
    value: PhoneNumber;
    case: "fromE164";
  } | {
    /**
     * @generated from field: wgtwo.common.v0.TextAddress from_text_address = 3;
     */
    value: TextAddress;
    case: "fromTextAddress";
  } | {
    /**
     * @generated from field: wgtwo.common.v0.NationalPhoneNumber from_short_number = 5;
     */
    value: NationalPhoneNumber;
    case: "fromShortNumber";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: wgtwo.common.v0.PhoneNumber to_subscriber = 4;
   */
  toSubscriber?: PhoneNumber;

  constructor(data?: PartialMessage<SendTextToSubscriberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.sms.v0.SendTextToSubscriberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from_e164", kind: "message", T: PhoneNumber, oneof: "from_address" },
    { no: 3, name: "from_text_address", kind: "message", T: TextAddress, oneof: "from_address" },
    { no: 5, name: "from_short_number", kind: "message", T: NationalPhoneNumber, oneof: "from_address" },
    { no: 4, name: "to_subscriber", kind: "message", T: PhoneNumber },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendTextToSubscriberRequest {
    return new SendTextToSubscriberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendTextToSubscriberRequest {
    return new SendTextToSubscriberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendTextToSubscriberRequest {
    return new SendTextToSubscriberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendTextToSubscriberRequest | PlainMessage<SendTextToSubscriberRequest> | undefined, b: SendTextToSubscriberRequest | PlainMessage<SendTextToSubscriberRequest> | undefined): boolean {
    return proto3.util.equals(SendTextToSubscriberRequest, a, b);
  }
}

/**
 * @generated from message wgtwo.sms.v0.SendTextFromSubscriberRequest
 */
export class SendTextFromSubscriberRequest extends Message<SendTextFromSubscriberRequest> {
  /**
   * @generated from field: string content = 1;
   */
  content = "";

  /**
   * @generated from field: wgtwo.common.v0.PhoneNumber from_subscriber = 2;
   */
  fromSubscriber?: PhoneNumber;

  /**
   * @generated from oneof wgtwo.sms.v0.SendTextFromSubscriberRequest.to_address
   */
  toAddress: {
    /**
     * @generated from field: wgtwo.common.v0.PhoneNumber to_e164 = 3;
     */
    value: PhoneNumber;
    case: "toE164";
  } | {
    /**
     * @generated from field: wgtwo.common.v0.NationalPhoneNumber to_short_number = 5;
     */
    value: NationalPhoneNumber;
    case: "toShortNumber";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SendTextFromSubscriberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.sms.v0.SendTextFromSubscriberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from_subscriber", kind: "message", T: PhoneNumber },
    { no: 3, name: "to_e164", kind: "message", T: PhoneNumber, oneof: "to_address" },
    { no: 5, name: "to_short_number", kind: "message", T: NationalPhoneNumber, oneof: "to_address" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendTextFromSubscriberRequest {
    return new SendTextFromSubscriberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendTextFromSubscriberRequest {
    return new SendTextFromSubscriberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendTextFromSubscriberRequest {
    return new SendTextFromSubscriberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendTextFromSubscriberRequest | PlainMessage<SendTextFromSubscriberRequest> | undefined, b: SendTextFromSubscriberRequest | PlainMessage<SendTextFromSubscriberRequest> | undefined): boolean {
    return proto3.util.equals(SendTextFromSubscriberRequest, a, b);
  }
}

/**
 * @generated from message wgtwo.sms.v0.SendBinaryToSubscriberRequest
 */
export class SendBinaryToSubscriberRequest extends Message<SendBinaryToSubscriberRequest> {
  /**
   * @generated from field: bytes content = 1;
   */
  content = new Uint8Array(0);

  /**
   * @generated from oneof wgtwo.sms.v0.SendBinaryToSubscriberRequest.from_address
   */
  fromAddress: {
    /**
     * @generated from field: wgtwo.common.v0.PhoneNumber from_e164 = 2;
     */
    value: PhoneNumber;
    case: "fromE164";
  } | {
    /**
     * @generated from field: wgtwo.common.v0.TextAddress from_text_address = 3;
     */
    value: TextAddress;
    case: "fromTextAddress";
  } | {
    /**
     * @generated from field: wgtwo.common.v0.NationalPhoneNumber from_short_number = 7;
     */
    value: NationalPhoneNumber;
    case: "fromShortNumber";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: wgtwo.common.v0.PhoneNumber to_subscriber = 4;
   */
  toSubscriber?: PhoneNumber;

  /**
   * @generated from field: wgtwo.sms.v0.SendBinaryToSubscriberRequest.MessageClass message_class = 5;
   */
  messageClass = SendBinaryToSubscriberRequest_MessageClass.MESSAGE_CLASS_NOT_SET;

  /**
   * @generated from field: wgtwo.sms.v0.SendBinaryToSubscriberRequest.ApplicationPort applicationPort = 6;
   */
  applicationPort?: SendBinaryToSubscriberRequest_ApplicationPort;

  constructor(data?: PartialMessage<SendBinaryToSubscriberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.sms.v0.SendBinaryToSubscriberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "from_e164", kind: "message", T: PhoneNumber, oneof: "from_address" },
    { no: 3, name: "from_text_address", kind: "message", T: TextAddress, oneof: "from_address" },
    { no: 7, name: "from_short_number", kind: "message", T: NationalPhoneNumber, oneof: "from_address" },
    { no: 4, name: "to_subscriber", kind: "message", T: PhoneNumber },
    { no: 5, name: "message_class", kind: "enum", T: proto3.getEnumType(SendBinaryToSubscriberRequest_MessageClass) },
    { no: 6, name: "applicationPort", kind: "message", T: SendBinaryToSubscriberRequest_ApplicationPort },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendBinaryToSubscriberRequest {
    return new SendBinaryToSubscriberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendBinaryToSubscriberRequest {
    return new SendBinaryToSubscriberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendBinaryToSubscriberRequest {
    return new SendBinaryToSubscriberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendBinaryToSubscriberRequest | PlainMessage<SendBinaryToSubscriberRequest> | undefined, b: SendBinaryToSubscriberRequest | PlainMessage<SendBinaryToSubscriberRequest> | undefined): boolean {
    return proto3.util.equals(SendBinaryToSubscriberRequest, a, b);
  }
}

/**
 * *
 * The class of the message. See https://en.wikipedia.org/wiki/Data_Coding_Scheme#Message_Classes
 *
 * @generated from enum wgtwo.sms.v0.SendBinaryToSubscriberRequest.MessageClass
 */
export enum SendBinaryToSubscriberRequest_MessageClass {
  /**
   * @generated from enum value: MESSAGE_CLASS_NOT_SET = 0;
   */
  MESSAGE_CLASS_NOT_SET = 0,

  /**
   * @generated from enum value: CLASS0 = 1;
   */
  CLASS0 = 1,

  /**
   * @generated from enum value: CLASS1 = 2;
   */
  CLASS1 = 2,

  /**
   * @generated from enum value: CLASS2 = 3;
   */
  CLASS2 = 3,

  /**
   * @generated from enum value: CLASS3 = 4;
   */
  CLASS3 = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(SendBinaryToSubscriberRequest_MessageClass)
proto3.util.setEnumType(SendBinaryToSubscriberRequest_MessageClass, "wgtwo.sms.v0.SendBinaryToSubscriberRequest.MessageClass", [
  { no: 0, name: "MESSAGE_CLASS_NOT_SET" },
  { no: 1, name: "CLASS0" },
  { no: 2, name: "CLASS1" },
  { no: 3, name: "CLASS2" },
  { no: 4, name: "CLASS3" },
]);

/**
 * @generated from message wgtwo.sms.v0.SendBinaryToSubscriberRequest.ApplicationPort
 */
export class SendBinaryToSubscriberRequest_ApplicationPort extends Message<SendBinaryToSubscriberRequest_ApplicationPort> {
  /**
   * @generated from field: uint32 originatorPort = 1;
   */
  originatorPort = 0;

  /**
   * @generated from field: uint32 destinationPort = 2;
   */
  destinationPort = 0;

  constructor(data?: PartialMessage<SendBinaryToSubscriberRequest_ApplicationPort>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.sms.v0.SendBinaryToSubscriberRequest.ApplicationPort";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "originatorPort", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "destinationPort", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendBinaryToSubscriberRequest_ApplicationPort {
    return new SendBinaryToSubscriberRequest_ApplicationPort().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendBinaryToSubscriberRequest_ApplicationPort {
    return new SendBinaryToSubscriberRequest_ApplicationPort().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendBinaryToSubscriberRequest_ApplicationPort {
    return new SendBinaryToSubscriberRequest_ApplicationPort().fromJsonString(jsonString, options);
  }

  static equals(a: SendBinaryToSubscriberRequest_ApplicationPort | PlainMessage<SendBinaryToSubscriberRequest_ApplicationPort> | undefined, b: SendBinaryToSubscriberRequest_ApplicationPort | PlainMessage<SendBinaryToSubscriberRequest_ApplicationPort> | undefined): boolean {
    return proto3.util.equals(SendBinaryToSubscriberRequest_ApplicationPort, a, b);
  }
}

/**
 * @generated from message wgtwo.sms.v0.SendResponse
 */
export class SendResponse extends Message<SendResponse> {
  /**
   * @generated from field: string request_id = 1;
   */
  requestId = "";

  /**
   * @generated from field: wgtwo.sms.v0.SendResponse.SendStatus status = 2;
   */
  status = SendResponse_SendStatus.UNKNOWN;

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  constructor(data?: PartialMessage<SendResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.sms.v0.SendResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(SendResponse_SendStatus) },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendResponse {
    return new SendResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendResponse {
    return new SendResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendResponse {
    return new SendResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SendResponse | PlainMessage<SendResponse> | undefined, b: SendResponse | PlainMessage<SendResponse> | undefined): boolean {
    return proto3.util.equals(SendResponse, a, b);
  }
}

/**
 * @generated from enum wgtwo.sms.v0.SendResponse.SendStatus
 */
export enum SendResponse_SendStatus {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: SEND_OK = 1;
   */
  SEND_OK = 1,

  /**
   * @generated from enum value: SEND_REJECT = 2;
   */
  SEND_REJECT = 2,

  /**
   * @generated from enum value: SEND_ERROR = 3;
   */
  SEND_ERROR = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(SendResponse_SendStatus)
proto3.util.setEnumType(SendResponse_SendStatus, "wgtwo.sms.v0.SendResponse.SendStatus", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "SEND_OK" },
  { no: 2, name: "SEND_REJECT" },
  { no: 3, name: "SEND_ERROR" },
]);

