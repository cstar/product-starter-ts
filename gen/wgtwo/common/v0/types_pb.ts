// Copyright 2021 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file wgtwo/common/v0/types.proto (package wgtwo.common.v0, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum wgtwo.common.v0.NetworkGeneration
 */
export enum NetworkGeneration {
  /**
   * @generated from enum value: NETWORK_GENERATION_UNSPECIFIED = 0;
   */
  NETWORK_GENERATION_UNSPECIFIED = 0,

  /**
   * @generated from enum value: NETWORK_GENERATION_2G = 1;
   */
  NETWORK_GENERATION_2G = 1,

  /**
   * @generated from enum value: NETWORK_GENERATION_3G = 2;
   */
  NETWORK_GENERATION_3G = 2,

  /**
   * @generated from enum value: NETWORK_GENERATION_4G = 3;
   */
  NETWORK_GENERATION_4G = 3,

  /**
   * @generated from enum value: NETWORK_GENERATION_5G = 4;
   */
  NETWORK_GENERATION_5G = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(NetworkGeneration)
proto3.util.setEnumType(NetworkGeneration, "wgtwo.common.v0.NetworkGeneration", [
  { no: 0, name: "NETWORK_GENERATION_UNSPECIFIED" },
  { no: 1, name: "NETWORK_GENERATION_2G" },
  { no: 2, name: "NETWORK_GENERATION_3G" },
  { no: 3, name: "NETWORK_GENERATION_4G" },
  { no: 4, name: "NETWORK_GENERATION_5G" },
]);

/**
 * International Mobile Subscription Identity
 * An IMSI is composed of three parts:
 *  1) Mobile Country Code (MCC) consisting of three digits. The MCC is 3 digits long and identifies
 *    uniquely the country of domicile of the mobile subscription;
 *  2) Mobile Network Code (MNC), 2 or 3 digits for 3GPP network applications. The MNC identifies
 *    the home PLMN of the mobile subscription. The length of the MNC depends on the value of the
 *    MCC. A mixture of two and three digit MNC codes within a single MCC area is not recommended.
 *  3) Mobile Subscriber Identification Number (MSIN) identifying the mobile subscription within a
 *    PLMN. Normally there are 10 digits, but can be fewer in the case of a 3-digit MNC or if
 *    national regulations indicate that the total length of the IMSI should be less than 15 digits.
 *
 * @generated from message wgtwo.common.v0.Imsi
 */
export class Imsi extends Message<Imsi> {
  /**
   * @generated from field: string value = 1;
   */
  value = "";

  constructor(data?: PartialMessage<Imsi>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.common.v0.Imsi";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Imsi {
    return new Imsi().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Imsi {
    return new Imsi().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Imsi {
    return new Imsi().fromJsonString(jsonString, options);
  }

  static equals(a: Imsi | PlainMessage<Imsi> | undefined, b: Imsi | PlainMessage<Imsi> | undefined): boolean {
    return proto3.util.equals(Imsi, a, b);
  }
}

/**
 * @generated from message wgtwo.common.v0.Tadig
 */
export class Tadig extends Message<Tadig> {
  /**
   * @generated from field: string value = 1;
   */
  value = "";

  constructor(data?: PartialMessage<Tadig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.common.v0.Tadig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tadig {
    return new Tadig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tadig {
    return new Tadig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tadig {
    return new Tadig().fromJsonString(jsonString, options);
  }

  static equals(a: Tadig | PlainMessage<Tadig> | undefined, b: Tadig | PlainMessage<Tadig> | undefined): boolean {
    return proto3.util.equals(Tadig, a, b);
  }
}

/**
 * @generated from message wgtwo.common.v0.Iccid
 */
export class Iccid extends Message<Iccid> {
  /**
   * @generated from field: string value = 1;
   */
  value = "";

  constructor(data?: PartialMessage<Iccid>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.common.v0.Iccid";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Iccid {
    return new Iccid().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Iccid {
    return new Iccid().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Iccid {
    return new Iccid().fromJsonString(jsonString, options);
  }

  static equals(a: Iccid | PlainMessage<Iccid> | undefined, b: Iccid | PlainMessage<Iccid> | undefined): boolean {
    return proto3.util.equals(Iccid, a, b);
  }
}

/**
 * @generated from message wgtwo.common.v0.NetworkIdentity
 */
export class NetworkIdentity extends Message<NetworkIdentity> {
  /**
   * @generated from field: string mcc = 1;
   */
  mcc = "";

  /**
   * @generated from field: string mnc = 2;
   */
  mnc = "";

  constructor(data?: PartialMessage<NetworkIdentity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.common.v0.NetworkIdentity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mcc", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mnc", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NetworkIdentity {
    return new NetworkIdentity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NetworkIdentity {
    return new NetworkIdentity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NetworkIdentity {
    return new NetworkIdentity().fromJsonString(jsonString, options);
  }

  static equals(a: NetworkIdentity | PlainMessage<NetworkIdentity> | undefined, b: NetworkIdentity | PlainMessage<NetworkIdentity> | undefined): boolean {
    return proto3.util.equals(NetworkIdentity, a, b);
  }
}

/**
 * @generated from message wgtwo.common.v0.GlobalTitle
 */
export class GlobalTitle extends Message<GlobalTitle> {
  /**
   * @generated from field: string value = 1;
   */
  value = "";

  constructor(data?: PartialMessage<GlobalTitle>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.common.v0.GlobalTitle";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GlobalTitle {
    return new GlobalTitle().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GlobalTitle {
    return new GlobalTitle().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GlobalTitle {
    return new GlobalTitle().fromJsonString(jsonString, options);
  }

  static equals(a: GlobalTitle | PlainMessage<GlobalTitle> | undefined, b: GlobalTitle | PlainMessage<GlobalTitle> | undefined): boolean {
    return proto3.util.equals(GlobalTitle, a, b);
  }
}

/**
 * Fully Qualified Domain Name
 *
 * @generated from message wgtwo.common.v0.Fqdn
 */
export class Fqdn extends Message<Fqdn> {
  /**
   * @generated from field: string value = 1;
   */
  value = "";

  constructor(data?: PartialMessage<Fqdn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.common.v0.Fqdn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Fqdn {
    return new Fqdn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Fqdn {
    return new Fqdn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Fqdn {
    return new Fqdn().fromJsonString(jsonString, options);
  }

  static equals(a: Fqdn | PlainMessage<Fqdn> | undefined, b: Fqdn | PlainMessage<Fqdn> | undefined): boolean {
    return proto3.util.equals(Fqdn, a, b);
  }
}

