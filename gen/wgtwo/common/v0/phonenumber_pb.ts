// Copyright 2020 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file wgtwo/common/v0/phonenumber.proto (package wgtwo.common.v0, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message wgtwo.common.v0.PhoneNumber
 */
export class PhoneNumber extends Message<PhoneNumber> {
  /**
   * Phone number formatted as E.164 with leading plus sign
   *
   * This contains of three components:
   * - The plus prefix
   * - Country code, max 3 digits
   * - Subscriber number
   *
   * Test your number at https://libphonenumber.appspot.com/
   * Example: +12024561111
   *
   * @generated from field: string e164 = 1;
   */
  e164 = "";

  constructor(data?: PartialMessage<PhoneNumber>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.common.v0.PhoneNumber";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "e164", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhoneNumber {
    return new PhoneNumber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhoneNumber {
    return new PhoneNumber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhoneNumber {
    return new PhoneNumber().fromJsonString(jsonString, options);
  }

  static equals(a: PhoneNumber | PlainMessage<PhoneNumber> | undefined, b: PhoneNumber | PlainMessage<PhoneNumber> | undefined): boolean {
    return proto3.util.equals(PhoneNumber, a, b);
  }
}

/**
 * @generated from message wgtwo.common.v0.TextAddress
 */
export class TextAddress extends Message<TextAddress> {
  /**
   * @generated from field: string text_address = 1;
   */
  textAddress = "";

  constructor(data?: PartialMessage<TextAddress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.common.v0.TextAddress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TextAddress {
    return new TextAddress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TextAddress {
    return new TextAddress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TextAddress {
    return new TextAddress().fromJsonString(jsonString, options);
  }

  static equals(a: TextAddress | PlainMessage<TextAddress> | undefined, b: TextAddress | PlainMessage<TextAddress> | undefined): boolean {
    return proto3.util.equals(TextAddress, a, b);
  }
}

/**
 * Any phone number that is tied to a specific country.
 * Does not contain the prefix '+' nor a country code.
 *
 * @generated from message wgtwo.common.v0.NationalPhoneNumber
 */
export class NationalPhoneNumber extends Message<NationalPhoneNumber> {
  /**
   * @generated from field: string national_phone_number = 1;
   */
  nationalPhoneNumber = "";

  constructor(data?: PartialMessage<NationalPhoneNumber>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.common.v0.NationalPhoneNumber";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "national_phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NationalPhoneNumber {
    return new NationalPhoneNumber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NationalPhoneNumber {
    return new NationalPhoneNumber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NationalPhoneNumber {
    return new NationalPhoneNumber().fromJsonString(jsonString, options);
  }

  static equals(a: NationalPhoneNumber | PlainMessage<NationalPhoneNumber> | undefined, b: NationalPhoneNumber | PlainMessage<NationalPhoneNumber> | undefined): boolean {
    return proto3.util.equals(NationalPhoneNumber, a, b);
  }
}

