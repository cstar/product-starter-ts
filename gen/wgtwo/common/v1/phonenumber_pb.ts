// Copyright 2021 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file wgtwo/common/v1/phonenumber.proto (package wgtwo.common.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * *
 * An international phone number formatted as E.164 with leading plus sign
 *
 * This contains three components:
 * - The plus prefix
 * - Country code, 1 to 3 digits
 * - Subscriber number
 *
 * Example "+4787654321" as '+' '47' '87654321'.
 *
 * The number may contain sequences that do not strictly conform to the E.164
 * number standard (e.g. too long), but shall always follow the three components
 * as described above.
 *
 * @generated from message wgtwo.common.v1.E164
 */
export class E164 extends Message<E164> {
  /**
   * @generated from field: string e164 = 1;
   */
  e164 = "";

  constructor(data?: PartialMessage<E164>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.common.v1.E164";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "e164", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): E164 {
    return new E164().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): E164 {
    return new E164().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): E164 {
    return new E164().fromJsonString(jsonString, options);
  }

  static equals(a: E164 | PlainMessage<E164> | undefined, b: E164 | PlainMessage<E164> | undefined): boolean {
    return proto3.util.equals(E164, a, b);
  }
}

/**
 * *
 * A national number can be anything that is usually typed into a number field
 * for phone numbers, SMS etc. It shall only contains digits (0-9), and the meaning
 * of the number sequence is dependent on the country of the relevant operator.
 *
 * @generated from message wgtwo.common.v1.National
 */
export class National extends Message<National> {
  /**
   * @generated from field: string number = 1;
   */
  number = "";

  constructor(data?: PartialMessage<National>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.common.v1.National";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): National {
    return new National().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): National {
    return new National().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): National {
    return new National().fromJsonString(jsonString, options);
  }

  static equals(a: National | PlainMessage<National> | undefined, b: National | PlainMessage<National> | undefined): boolean {
    return proto3.util.equals(National, a, b);
  }
}

/**
 * *
 * An alphanumeric address. This is usually just be the name of a product or service.
 * Alphanumeric addresses are usually not routable, and can thus only be used in
 * origin addresses.
 *
 * @generated from message wgtwo.common.v1.Alphanumeric
 */
export class Alphanumeric extends Message<Alphanumeric> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  constructor(data?: PartialMessage<Alphanumeric>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.common.v1.Alphanumeric";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Alphanumeric {
    return new Alphanumeric().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Alphanumeric {
    return new Alphanumeric().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Alphanumeric {
    return new Alphanumeric().fromJsonString(jsonString, options);
  }

  static equals(a: Alphanumeric | PlainMessage<Alphanumeric> | undefined, b: Alphanumeric | PlainMessage<Alphanumeric> | undefined): boolean {
    return proto3.util.equals(Alphanumeric, a, b);
  }
}

