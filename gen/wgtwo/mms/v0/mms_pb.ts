// Copyright 2020 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file wgtwo/mms/v0/mms.proto (package wgtwo.mms.v0, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { PhoneNumber, TextAddress } from "../../common/v0/phonenumber_pb.js";

/**
 * @generated from message wgtwo.mms.v0.MessageContent
 */
export class MessageContent extends Message<MessageContent> {
  /**
   * @generated from oneof wgtwo.mms.v0.MessageContent.content
   */
  content: {
    /**
     * @generated from field: wgtwo.mms.v0.AudioContent audio = 1;
     */
    value: AudioContent;
    case: "audio";
  } | {
    /**
     * @generated from field: wgtwo.mms.v0.TextContent text = 2;
     */
    value: TextContent;
    case: "text";
  } | {
    /**
     * @generated from field: wgtwo.mms.v0.ImageContent image = 3;
     */
    value: ImageContent;
    case: "image";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<MessageContent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.mms.v0.MessageContent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "audio", kind: "message", T: AudioContent, oneof: "content" },
    { no: 2, name: "text", kind: "message", T: TextContent, oneof: "content" },
    { no: 3, name: "image", kind: "message", T: ImageContent, oneof: "content" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageContent {
    return new MessageContent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageContent {
    return new MessageContent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageContent {
    return new MessageContent().fromJsonString(jsonString, options);
  }

  static equals(a: MessageContent | PlainMessage<MessageContent> | undefined, b: MessageContent | PlainMessage<MessageContent> | undefined): boolean {
    return proto3.util.equals(MessageContent, a, b);
  }
}

/**
 * @generated from message wgtwo.mms.v0.AudioContent
 */
export class AudioContent extends Message<AudioContent> {
  /**
   * @generated from oneof wgtwo.mms.v0.AudioContent.content
   */
  content: {
    /**
     * @generated from field: bytes mp3 = 1;
     */
    value: Uint8Array;
    case: "mp3";
  } | {
    /**
     * @generated from field: bytes opus = 2;
     */
    value: Uint8Array;
    case: "opus";
  } | {
    /**
     * @generated from field: bytes amr = 3;
     */
    value: Uint8Array;
    case: "amr";
  } | {
    /**
     * @generated from field: bytes wav = 4;
     */
    value: Uint8Array;
    case: "wav";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AudioContent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.mms.v0.AudioContent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mp3", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "content" },
    { no: 2, name: "opus", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "content" },
    { no: 3, name: "amr", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "content" },
    { no: 4, name: "wav", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "content" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AudioContent {
    return new AudioContent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AudioContent {
    return new AudioContent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AudioContent {
    return new AudioContent().fromJsonString(jsonString, options);
  }

  static equals(a: AudioContent | PlainMessage<AudioContent> | undefined, b: AudioContent | PlainMessage<AudioContent> | undefined): boolean {
    return proto3.util.equals(AudioContent, a, b);
  }
}

/**
 * @generated from message wgtwo.mms.v0.TextContent
 */
export class TextContent extends Message<TextContent> {
  /**
   * @generated from field: string text = 1;
   */
  text = "";

  constructor(data?: PartialMessage<TextContent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.mms.v0.TextContent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TextContent {
    return new TextContent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TextContent {
    return new TextContent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TextContent {
    return new TextContent().fromJsonString(jsonString, options);
  }

  static equals(a: TextContent | PlainMessage<TextContent> | undefined, b: TextContent | PlainMessage<TextContent> | undefined): boolean {
    return proto3.util.equals(TextContent, a, b);
  }
}

/**
 * @generated from message wgtwo.mms.v0.ImageContent
 */
export class ImageContent extends Message<ImageContent> {
  /**
   * @generated from oneof wgtwo.mms.v0.ImageContent.content
   */
  content: {
    /**
     * @generated from field: bytes png = 1;
     */
    value: Uint8Array;
    case: "png";
  } | {
    /**
     * @generated from field: bytes jpg = 2;
     */
    value: Uint8Array;
    case: "jpg";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ImageContent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.mms.v0.ImageContent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "png", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "content" },
    { no: 2, name: "jpg", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "content" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImageContent {
    return new ImageContent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImageContent {
    return new ImageContent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImageContent {
    return new ImageContent().fromJsonString(jsonString, options);
  }

  static equals(a: ImageContent | PlainMessage<ImageContent> | undefined, b: ImageContent | PlainMessage<ImageContent> | undefined): boolean {
    return proto3.util.equals(ImageContent, a, b);
  }
}

/**
 * @generated from message wgtwo.mms.v0.SendMessageToSubscriberRequest
 */
export class SendMessageToSubscriberRequest extends Message<SendMessageToSubscriberRequest> {
  /**
   * @generated from field: repeated wgtwo.mms.v0.MessageContent message_content = 1;
   */
  messageContent: MessageContent[] = [];

  /**
   * @generated from oneof wgtwo.mms.v0.SendMessageToSubscriberRequest.from_address
   */
  fromAddress: {
    /**
     * @generated from field: wgtwo.common.v0.PhoneNumber from_e164 = 2;
     */
    value: PhoneNumber;
    case: "fromE164";
  } | {
    /**
     * @generated from field: wgtwo.common.v0.TextAddress from_text_address = 3;
     */
    value: TextAddress;
    case: "fromTextAddress";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: wgtwo.common.v0.PhoneNumber to_subscriber = 5;
   */
  toSubscriber?: PhoneNumber;

  constructor(data?: PartialMessage<SendMessageToSubscriberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.mms.v0.SendMessageToSubscriberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message_content", kind: "message", T: MessageContent, repeated: true },
    { no: 2, name: "from_e164", kind: "message", T: PhoneNumber, oneof: "from_address" },
    { no: 3, name: "from_text_address", kind: "message", T: TextAddress, oneof: "from_address" },
    { no: 5, name: "to_subscriber", kind: "message", T: PhoneNumber },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendMessageToSubscriberRequest {
    return new SendMessageToSubscriberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendMessageToSubscriberRequest {
    return new SendMessageToSubscriberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendMessageToSubscriberRequest {
    return new SendMessageToSubscriberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendMessageToSubscriberRequest | PlainMessage<SendMessageToSubscriberRequest> | undefined, b: SendMessageToSubscriberRequest | PlainMessage<SendMessageToSubscriberRequest> | undefined): boolean {
    return proto3.util.equals(SendMessageToSubscriberRequest, a, b);
  }
}

/**
 * @generated from message wgtwo.mms.v0.SendMessageFromSubscriberRequest
 */
export class SendMessageFromSubscriberRequest extends Message<SendMessageFromSubscriberRequest> {
  /**
   * @generated from field: repeated wgtwo.mms.v0.MessageContent message_content = 1;
   */
  messageContent: MessageContent[] = [];

  /**
   * @generated from field: wgtwo.common.v0.PhoneNumber from_subscriber = 2;
   */
  fromSubscriber?: PhoneNumber;

  /**
   * @generated from field: wgtwo.common.v0.PhoneNumber to_e164 = 3;
   */
  toE164?: PhoneNumber;

  constructor(data?: PartialMessage<SendMessageFromSubscriberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.mms.v0.SendMessageFromSubscriberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message_content", kind: "message", T: MessageContent, repeated: true },
    { no: 2, name: "from_subscriber", kind: "message", T: PhoneNumber },
    { no: 3, name: "to_e164", kind: "message", T: PhoneNumber },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendMessageFromSubscriberRequest {
    return new SendMessageFromSubscriberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendMessageFromSubscriberRequest {
    return new SendMessageFromSubscriberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendMessageFromSubscriberRequest {
    return new SendMessageFromSubscriberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendMessageFromSubscriberRequest | PlainMessage<SendMessageFromSubscriberRequest> | undefined, b: SendMessageFromSubscriberRequest | PlainMessage<SendMessageFromSubscriberRequest> | undefined): boolean {
    return proto3.util.equals(SendMessageFromSubscriberRequest, a, b);
  }
}

/**
 * @generated from message wgtwo.mms.v0.SendResponse
 */
export class SendResponse extends Message<SendResponse> {
  /**
   * @generated from field: string request_id = 1;
   */
  requestId = "";

  /**
   * @generated from field: wgtwo.mms.v0.SendResponse.SendStatus status = 2;
   */
  status = SendResponse_SendStatus.UNKNOWN;

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  constructor(data?: PartialMessage<SendResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.mms.v0.SendResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(SendResponse_SendStatus) },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendResponse {
    return new SendResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendResponse {
    return new SendResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendResponse {
    return new SendResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SendResponse | PlainMessage<SendResponse> | undefined, b: SendResponse | PlainMessage<SendResponse> | undefined): boolean {
    return proto3.util.equals(SendResponse, a, b);
  }
}

/**
 * @generated from enum wgtwo.mms.v0.SendResponse.SendStatus
 */
export enum SendResponse_SendStatus {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: SEND_OK = 1;
   */
  SEND_OK = 1,

  /**
   * @generated from enum value: SEND_REJECT = 2;
   */
  SEND_REJECT = 2,

  /**
   * @generated from enum value: SEND_ERROR = 3;
   */
  SEND_ERROR = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(SendResponse_SendStatus)
proto3.util.setEnumType(SendResponse_SendStatus, "wgtwo.mms.v0.SendResponse.SendStatus", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "SEND_OK" },
  { no: 2, name: "SEND_REJECT" },
  { no: 3, name: "SEND_ERROR" },
]);

