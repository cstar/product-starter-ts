// Copyright 2020 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file wgtwo/sipbreakout/v0/sipbreakout.proto (package wgtwo.sipbreakout.v0, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3 } from "@bufbuild/protobuf";
import { PhoneNumber } from "../../common/v0/phonenumber_pb.js";

/**
 * @generated from enum wgtwo.sipbreakout.v0.StatusCode
 */
export enum StatusCode {
  /**
   * @generated from enum value: STATUS_CODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: STATUS_CODE_OK = 1;
   */
  OK = 1,

  /**
   * @generated from enum value: STATUS_CODE_NOT_ACCEPTABLE = 2;
   */
  NOT_ACCEPTABLE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(StatusCode)
proto3.util.setEnumType(StatusCode, "wgtwo.sipbreakout.v0.StatusCode", [
  { no: 0, name: "STATUS_CODE_UNSPECIFIED" },
  { no: 1, name: "STATUS_CODE_OK" },
  { no: 2, name: "STATUS_CODE_NOT_ACCEPTABLE" },
]);

/**
 * @generated from enum wgtwo.sipbreakout.v0.RouteType
 */
export enum RouteType {
  /**
   * @generated from enum value: ROUTE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ROUTE_TYPE_LOOP = 1;
   */
  LOOP = 1,

  /**
   * @generated from enum value: ROUTE_TYPE_FORK = 2;
   */
  FORK = 2,

  /**
   * @generated from enum value: ROUTE_TYPE_FALLBACK = 3;
   */
  FALLBACK = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(RouteType)
proto3.util.setEnumType(RouteType, "wgtwo.sipbreakout.v0.RouteType", [
  { no: 0, name: "ROUTE_TYPE_UNSPECIFIED" },
  { no: 1, name: "ROUTE_TYPE_LOOP" },
  { no: 2, name: "ROUTE_TYPE_FORK" },
  { no: 3, name: "ROUTE_TYPE_FALLBACK" },
]);

/**
 * @generated from message wgtwo.sipbreakout.v0.UpsertRegistrationRequest
 */
export class UpsertRegistrationRequest extends Message<UpsertRegistrationRequest> {
  /**
   * @generated from field: wgtwo.sipbreakout.v0.Registration registration = 1;
   */
  registration?: Registration;

  constructor(data?: PartialMessage<UpsertRegistrationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.sipbreakout.v0.UpsertRegistrationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "registration", kind: "message", T: Registration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertRegistrationRequest {
    return new UpsertRegistrationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertRegistrationRequest {
    return new UpsertRegistrationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertRegistrationRequest {
    return new UpsertRegistrationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertRegistrationRequest | PlainMessage<UpsertRegistrationRequest> | undefined, b: UpsertRegistrationRequest | PlainMessage<UpsertRegistrationRequest> | undefined): boolean {
    return proto3.util.equals(UpsertRegistrationRequest, a, b);
  }
}

/**
 * @generated from message wgtwo.sipbreakout.v0.UpsertRegistrationResponse
 */
export class UpsertRegistrationResponse extends Message<UpsertRegistrationResponse> {
  /**
   * The response status for attempting to updating the registration
   *
   * @generated from field: wgtwo.sipbreakout.v0.StatusCode status_code = 1;
   */
  statusCode = StatusCode.UNSPECIFIED;

  /**
   * Human readable description for what failed or rejected the registration.
   *
   * @generated from field: string error_message = 2;
   */
  errorMessage = "";

  /**
   * Time to live for the registration
   *
   * @generated from field: google.protobuf.Duration time_to_live = 3;
   */
  timeToLive?: Duration;

  constructor(data?: PartialMessage<UpsertRegistrationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.sipbreakout.v0.UpsertRegistrationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status_code", kind: "enum", T: proto3.getEnumType(StatusCode) },
    { no: 2, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "time_to_live", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertRegistrationResponse {
    return new UpsertRegistrationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertRegistrationResponse {
    return new UpsertRegistrationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertRegistrationResponse {
    return new UpsertRegistrationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertRegistrationResponse | PlainMessage<UpsertRegistrationResponse> | undefined, b: UpsertRegistrationResponse | PlainMessage<UpsertRegistrationResponse> | undefined): boolean {
    return proto3.util.equals(UpsertRegistrationResponse, a, b);
  }
}

/**
 * @generated from message wgtwo.sipbreakout.v0.DeleteRegistrationRequest
 */
export class DeleteRegistrationRequest extends Message<DeleteRegistrationRequest> {
  /**
   * @generated from field: wgtwo.sipbreakout.v0.Registration registration = 1;
   */
  registration?: Registration;

  constructor(data?: PartialMessage<DeleteRegistrationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.sipbreakout.v0.DeleteRegistrationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "registration", kind: "message", T: Registration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRegistrationRequest {
    return new DeleteRegistrationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRegistrationRequest {
    return new DeleteRegistrationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRegistrationRequest {
    return new DeleteRegistrationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRegistrationRequest | PlainMessage<DeleteRegistrationRequest> | undefined, b: DeleteRegistrationRequest | PlainMessage<DeleteRegistrationRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRegistrationRequest, a, b);
  }
}

/**
 * @generated from message wgtwo.sipbreakout.v0.DeleteRegistrationResponse
 */
export class DeleteRegistrationResponse extends Message<DeleteRegistrationResponse> {
  /**
   * The response status for attempting to updating the registration
   *
   * @generated from field: wgtwo.sipbreakout.v0.StatusCode status_code = 1;
   */
  statusCode = StatusCode.UNSPECIFIED;

  /**
   * Human readable description for what failed or rejected the registration.
   *
   * @generated from field: string error_message = 2;
   */
  errorMessage = "";

  constructor(data?: PartialMessage<DeleteRegistrationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.sipbreakout.v0.DeleteRegistrationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status_code", kind: "enum", T: proto3.getEnumType(StatusCode) },
    { no: 2, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRegistrationResponse {
    return new DeleteRegistrationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRegistrationResponse {
    return new DeleteRegistrationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRegistrationResponse {
    return new DeleteRegistrationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRegistrationResponse | PlainMessage<DeleteRegistrationResponse> | undefined, b: DeleteRegistrationResponse | PlainMessage<DeleteRegistrationResponse> | undefined): boolean {
    return proto3.util.equals(DeleteRegistrationResponse, a, b);
  }
}

/**
 * @generated from message wgtwo.sipbreakout.v0.Registration
 */
export class Registration extends Message<Registration> {
  /**
   * If set to 00 then INVITE sip:+47112334455... becomes INVITE sip:+0047112334455
   * This field is optional
   *
   * @generated from field: string mobile_originating_prefix = 1;
   */
  mobileOriginatingPrefix = "";

  /**
   * If set to 00 then INVITE sip:+47112334455... becomes INVITE sip:+0047112334455
   * This field is optional
   *
   * @generated from field: string mobile_terminating_prefix = 2;
   */
  mobileTerminatingPrefix = "";

  /**
   * sips:example.com or sips:example.com:8888
   *
   * @generated from field: string sip_uri = 3;
   */
  sipUri = "";

  /**
   * @generated from field: wgtwo.sipbreakout.v0.RouteType route_type = 4;
   */
  routeType = RouteType.UNSPECIFIED;

  /**
   * Must be provided if using client access token
   *
   * @generated from field: wgtwo.common.v0.PhoneNumber phone_number = 5;
   */
  phoneNumber?: PhoneNumber;

  constructor(data?: PartialMessage<Registration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wgtwo.sipbreakout.v0.Registration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mobile_originating_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mobile_terminating_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sip_uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "route_type", kind: "enum", T: proto3.getEnumType(RouteType) },
    { no: 5, name: "phone_number", kind: "message", T: PhoneNumber },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Registration {
    return new Registration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Registration {
    return new Registration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Registration {
    return new Registration().fromJsonString(jsonString, options);
  }

  static equals(a: Registration | PlainMessage<Registration> | undefined, b: Registration | PlainMessage<Registration> | undefined): boolean {
    return proto3.util.equals(Registration, a, b);
  }
}

