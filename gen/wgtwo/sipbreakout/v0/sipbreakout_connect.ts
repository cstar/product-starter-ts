// Copyright 2020 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// @generated by protoc-gen-connect-es v0.13.2 with parameter "target=ts"
// @generated from file wgtwo/sipbreakout/v0/sipbreakout.proto (package wgtwo.sipbreakout.v0, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { DeleteRegistrationRequest, DeleteRegistrationResponse, UpsertRegistrationRequest, UpsertRegistrationResponse } from "./sipbreakout_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * Virtual SIP Registration makes WG2 Core to involve third party Telephony Application Server (TAS)
 * in to the call processing
 * WG2 Session Boarder Controller(SBC) will forward SIP signalling to the TAS based on presence of the
 * SIP Registration and its type. The type can be one of "loop", "fork", or "fallback".
 *
 *       ┌───────┐                   |    ┌───────┐
 *       │ Alice ├───1───────┐       |    │ Alice ├───1───────┐
 *       └───────┘           │       |    └───────┘           │
 *                           │       |                        │
 *       ┌──────┐         ┌──▼──┐    |    ┌───────┐        ┌──▼──┐
 *       │ Bob  ◄────4────┤ WG2 │    |    │ Bob   ◄───2────┤ WG2 │
 *       └──────┘         └─▲──┬┘    |    └───────┘        └──┬──┘
 *                          3  2     |                        3
 *                          │  │     |                        │
 *                         ┌┴──▼┐    |                      ┌─▼──┐
 *                         │TAS │    |                      │TAS │
 *                         └────┘    |                      └────┘
 *                                  |
 *               Loop               VS       Fork / Fallback
 *
 * For `ROUTE_TYPE_LOOP` leg 4 is not created until call comes back as leg 3.
 * In this case, TAS is not obliged to create leg 3, and can itself answer or reject leg 2.
 *
 * For `ROUTE_TYPE_FORK` registration makes legs 2 and 3 to happen simultaneously.
 *
 * For `ROUTE_TYPE_FALLBACK` case leg 3 will only be created if leg 2 is not answered.
 *
 *
 * Creating the registration
 *  SipBreakOutService.UpsertRegistration(Registration) - registration details select its type, prefixes to use
 *  on leg 2 (see above drawing), domain name of the TAS server.
 *
 * Prefix towards TAS
 *   Working Group Two can provide prefix in INVITE's URI to help TAS to figure out if call came because
 *   of the Caller or the Answerer. The prefix is set as follows
 *    ---------------------------------------------------------------------------------
 *    Caller has Registration        | Answerer has Registration       | Prefix
 *    -------------------------------|---------------------------------|---------------
 *              Yes                  | Yes                             | mobile_originating_prefix
 *              Yes                  | No                              | mobile_originating_prefix
 *              No                   | Yes                             | mobile_terminating_prefix
 *
 * Maintaining the registration
 *  Each SIP Registration has fixed TTL of 3600 seconds since last call to SipBreakOutService.UpsertRegistration()
 *  and has to be refreshed by using again SipBreakOutService.UpsertRegistration(Registration) with same parameters.
 *
 * Deleting the registration
 *  To remove registration without waiting for TTL to expire use SipBreakOutService.DeleteRegistration()
 *  with the same sip uri used in the original registration.
 *
 * SIP Transport
 *  TLS is used as SIP transport and TAS shall present valid certificate for SIP URI stated in
 *  Registration.sip_uri
 *
 * Media
 *  WebRTC style SDPs are used between WG2 SBC and TAS to encrypt media sessions.
 *
 * @generated from service wgtwo.sipbreakout.v0.SipBreakoutService
 */
export const SipBreakoutService = {
  typeName: "wgtwo.sipbreakout.v0.SipBreakoutService",
  methods: {
    /**
     * Add or replace a registration
     *
     * @generated from rpc wgtwo.sipbreakout.v0.SipBreakoutService.UpsertRegistration
     */
    upsertRegistration: {
      name: "UpsertRegistration",
      I: UpsertRegistrationRequest,
      O: UpsertRegistrationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete an existing registration
     *
     * @generated from rpc wgtwo.sipbreakout.v0.SipBreakoutService.DeleteRegistration
     */
    deleteRegistration: {
      name: "DeleteRegistration",
      I: DeleteRegistrationRequest,
      O: DeleteRegistrationResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

